{"documentCount":56,"nextId":56,"documentIds":{"0":"docs/pages/example.md#stone-packaging-example","1":"docs/pages/getting-started.md#getting-started-with-stone-packaging","2":"docs/pages/index.md#stone-packaging","3":"docs/pages/resourcers.md#stone-packaging-resources","4":"docs/pages/advanced/starknet.md#verifying-stone-proofs-on-starknet","5":"docs/pages/advanced/starknet.md#prerequisites","6":"docs/pages/advanced/starknet.md#download-binaries","7":"docs/pages/advanced/starknet.md#creating-and-verifying-a-test-proof-using-binaries","8":"docs/pages/advanced/starknet.md#splitting-the-proof","9":"docs/pages/advanced/starknet.md#stark_evm_adapter","10":"docs/pages/advanced/starknet.md#installation","11":"docs/pages/advanced/starknet.md#usage","12":"docs/pages/advanced/starknet.md#example-using-stark_evm_adapter","13":"docs/pages/advanced/starknet.md#utilizing-the-herodotus-integrity-file-to-serialize-the-proof","14":"docs/pages/advanced/starknet.md#serializing-the-proof","15":"docs/pages/advanced/starknet.md#setting-up-starknet-foundry","16":"docs/pages/advanced/starknet.md#acount-management","17":"docs/pages/advanced/starknet.md#deploying-your-account","18":"docs/pages/advanced/starknet.md#cairo-vm-verifier","19":"docs/pages/advanced/starknet.md#deploying-in-the-integrity-contracts-for-verification","20":"docs/pages/install/binaries.md#stone-packaging---installation-guide","21":"docs/pages/install/binaries.md#supported-architectures","22":"docs/pages/install/binaries.md#download-and-install-binaries","23":"docs/pages/install/binaries.md#for-macos-arm64","24":"docs/pages/install/binaries.md#for-linux-x86_64","25":"docs/pages/install/binaries.md#adding-stone-binaries-to-the-system-path","26":"docs/pages/install/binaries.md#verifying-installation","27":"docs/pages/install/debian.md#installing-stone-on-ubuntudebian","28":"docs/pages/install/debian.md#prerequisites","29":"docs/pages/install/debian.md#step-1-download-the-stone-deb-package","30":"docs/pages/install/debian.md#step-2-installating-the-package","31":"docs/pages/install/docker.md#getting-stone-docker-images","32":"docs/pages/install/docker.md#available-images","33":"docs/pages/install/docker.md#prover-image-lightweight","34":"docs/pages/install/docker.md#verifier-image-lightweight","35":"docs/pages/install/docker.md#combined-image","36":"docs/pages/install/docker.md#accessing-the-images","37":"docs/pages/install/docker.md#pulling-the-images","38":"docs/pages/usage/configuration.md#stone-prover-configuration","39":"docs/pages/usage/configuration.md#1-overview-of-the-stone-prover-configuration","40":"docs/pages/usage/configuration.md#2-security-settings-for-the-fri-protocol","41":"docs/pages/usage/configuration.md#21-key-parameters-for-the-fri-protocol","42":"docs/pages/usage/configuration.md#211-security-level-security_bits","43":"docs/pages/usage/configuration.md#212-expansion-factor-expansion_factor","44":"docs/pages/usage/configuration.md#213-blow-up-factor-blowup_factor","45":"docs/pages/usage/configuration.md#214-number-of-queries-num_queries","46":"docs/pages/usage/configuration.md#32-detailed-breakdown-of-configuration-parameters","47":"docs/pages/usage/configuration.md#4-how-to-create-a-configuration-file","48":"docs/pages/usage/proving.md#creating-and-verifying-a-proof-running-stone-prover","49":"docs/pages/usage/proving.md#creating-and-verifying-a-proof","50":"docs/pages/usage/proving.md#download-minimal-docker-images-for-x86_64","51":"docs/pages/usage/proving.md#creating-and-verifying-a-test-proof-using-docker","52":"docs/pages/usage/verifying.md#verifying-stone-proof-using-the-binary","53":"docs/pages/usage/verifying.md#creating-and-verifying-a-test-proof-using-binaries","54":"docs/pages/usage/verifying.md#download-minimal-docker-images-for-x86_64","55":"docs/pages/usage/verifying.md#creating-and-verifying-a-test-proof-using-docker"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[3,1,12],"1":[5,1,1],"2":[2,1,18],"3":[3,1,148],"4":[5,1,29],"5":[1,1,31],"6":[2,2,7],"7":[8,2,45],"8":[3,2,41],"9":[3,1,15],"10":[1,4,6],"11":[1,4,5],"12":[5,4,38],"13":[8,1,25],"14":[3,9,20],"15":[4,1,14],"16":[2,5,35],"17":[3,5,21],"18":[3,1,28],"19":[7,1,91],"20":[4,1,24],"21":[2,4,14],"22":[4,4,1],"23":[4,8,53],"24":[5,8,55],"25":[7,4,70],"26":[2,10,30],"27":[5,1,16],"28":[1,5,19],"29":[7,5,32],"30":[6,5,20],"31":[4,1,25],"32":[2,4,1],"33":[4,5,15],"34":[4,5,13],"35":[2,5,16],"36":[3,4,12],"37":[3,4,34],"38":[3,1,37],"39":[7,4,60],"40":[7,4,42],"41":[8,4,1],"42":[7,4,62],"43":[7,4,57],"44":[9,4,63],"45":[9,4,118],"46":[7,4,130],"47":[7,4,139],"48":[8,1,25],"49":[5,8,72],"50":[7,8,22],"51":[8,8,86],"52":[6,1,31],"53":[8,6,60],"54":[7,6,22],"55":[8,6,87]},"averageFieldLength":[4.803571428571428,3.7857142857142856,39.17857142857143],"storedFields":{"0":{"href":"/example#stone-packaging-example","html":"</header>\n<p>Here&#x27;s an example of how to use Stone Packaging...</p>","isPage":true,"text":"\nHere&#x27;s an example of how to use Stone Packaging...","title":"Stone Packaging Example","titles":[]},"1":{"href":"/getting-started#getting-started-with-stone-packaging","html":"</header>\n<p>...</p>","isPage":true,"text":"\n...","title":"Getting Started with Stone Packaging","titles":[]},"2":{"href":"/index#stone-packaging","html":"</header>\n<p>This is the main page of Stone Packaging documentation.</p>\n<p>Here&#x27;s an example of how to use Stone Packaging...</p>","isPage":true,"text":"\nThis is the main page of Stone Packaging documentation.\nHere&#x27;s an example of how to use Stone Packaging...","title":"Stone Packaging","titles":[]},"3":{"href":"/resourcers#stone-packaging-resources","html":"</header>\n<table><thead><tr><th>Resource</th><th>Description</th></tr></thead><tbody><tr><td><strong><a href=\"https://github.com/Moonsong-Labs/madara-prover-api\">Madara Prover API</a></strong></td><td>This project provides a server capable of executing any set of Cairo programs on top of the Starknet bootloader and generate the proof of execution of these programs. This server is used as part of the Madara sequencer to prove the transactions inside each (Madara) block</td></tr><tr><td><strong><a href=\"https://github.com/Moonsong-Labs/stone-prover-sdk\">Stone Prover SDK</a></strong></td><td>Is a <strong>Rust SDK</strong> for the Starkware Stone prover and verifier. To use this SDK, you will need the Stone prover and verifier binaries. You can either follow the instructions on the <a href=\"https://github.com/starkware-libs/stone-prover\">Stone repository</a>, download them from the <a href=\"https://github.com/Moonsong-Labs/stone-prover-sdk/releases/tag/v0.3.1\">latest SDK release.</a></td></tr><tr><td><strong><a href=\"https://github.com/zksecurity/stone-cli\">Stone CLI</a></strong></td><td>A <strong>CLI</strong> for proving Cairo programs and verifying and serializing Cairo proofs.</td></tr><tr><td><strong><a href=\"https://github.com/zksecurity/stark-evm-adapter\">Stark EVM Adapter</a></strong></td><td>stark-evm-adapter is a library that provides a set of utilities to parse and manipulate the output of the <strong>STARK</strong> stone proof. Specifically, the library can be used to generate a &quot;split proof&quot;, which is necessary for proofs to be verified on Ethereum.</td></tr><tr><td><strong><a href=\"https://github.com/HerodotusDev/integrity-calldata-generator\">Integrity Calldata Generator</a></strong></td><td>This is a utility that helps generate integrity calldata, which keeps our data safe and reliable.</td></tr><tr><td><strong><a href=\"https://github.com/cartridge-gg/cairo-proof-parser\">Cairo Proof Parser</a></strong></td><td>This lib crate is a parser written to translate beetwen different cairo proof formats. The input to the parse function is a proof in a json string format. The proof is expected to be generated by the stone prover with the -generate_annotations flag. Currently only the recursive and starknet layouts are supported.</td></tr><tr><td><strong><a href=\"https://zksecurity.github.io/stark-book/\">Stark Book</a></strong></td><td>This is the Starknet documentation where you can read and learn about it. If you want to delve deeper into Starknet you can check this <a href=\"https://docs.starknet.io/\">resource.</a></td></tr></tbody></table>","isPage":true,"text":"\nResourceDescriptionMadara Prover APIThis project provides a server capable of executing any set of Cairo programs on top of the Starknet bootloader and generate the proof of execution of these programs. This server is used as part of the Madara sequencer to prove the transactions inside each (Madara) blockStone Prover SDKIs a Rust SDK for the Starkware Stone prover and verifier. To use this SDK, you will need the Stone prover and verifier binaries. You can either follow the instructions on the Stone repository, download them from the latest SDK release.Stone CLIA CLI for proving Cairo programs and verifying and serializing Cairo proofs.Stark EVM Adapterstark-evm-adapter is a library that provides a set of utilities to parse and manipulate the output of the STARK stone proof. Specifically, the library can be used to generate a &quot;split proof&quot;, which is necessary for proofs to be verified on Ethereum.Integrity Calldata GeneratorThis is a utility that helps generate integrity calldata, which keeps our data safe and reliable.Cairo Proof ParserThis lib crate is a parser written to translate beetwen different cairo proof formats. The input to the parse function is a proof in a json string format. The proof is expected to be generated by the stone prover with the -generate_annotations flag. Currently only the recursive and starknet layouts are supported.Stark BookThis is the Starknet documentation where you can read and learn about it. If you want to delve deeper into Starknet you can check this resource.","title":"Stone Packaging Resources","titles":[]},"4":{"href":"/advanced/starknet#verifying-stone-proofs-on-starknet","html":"\n<p>This guide provides detailed instructions on creating and verifying Stone proofs on Starknet as well as how to deploy integrity contracts. Follow the steps below to ensure a smooth verification process.</p>\n","isPage":true,"text":"\nThis guide provides detailed instructions on creating and verifying Stone proofs on Starknet as well as how to deploy integrity contracts. Follow the steps below to ensure a smooth verification process.\n","title":"Verifying Stone proofs on Starknet","titles":[null]},"5":{"href":"/advanced/starknet#prerequisites","html":"\n<p>Before you begin, ensure you have the following tools and dependencies installed these are outlined here <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#prerequisites\">Integrity prerequisites</a>.</p>\n<ul>\n<li><a href=\"https://www.rust-lang.org/tools/install\">Rust</a></li>\n<li><a href=\"https://docs.swmansion.com/scarb/download.html\">Scarb</a></li>\n<li><a href=\"https://github.com/foundry-rs/starknet-foundry?tab=readme-ov-file#installation\">Starknet Foundry</a></li>\n</ul>\n<p>Make sure to follow the next usage instructions as referenced <a href=\"https://github.com/dipdup-io/stone-packaging?tab=readme-ov-file#usage-instructions\">here</a>.</p>\n","isPage":false,"text":"\nBefore you begin, ensure you have the following tools and dependencies installed these are outlined here Integrity prerequisites.\n\nRust\nScarb\nStarknet Foundry\n\nMake sure to follow the next usage instructions as referenced here.\n","title":"Prerequisites","titles":[null]},"6":{"href":"/advanced/starknet#download-binaries","html":"\n<p>By following the next <a href=\"../install/binaries.md\">installation guide</a>.</p>\n","isPage":false,"text":"\nBy following the next installation guide.\n","title":"Download Binaries","titles":[null,"Prerequisites"]},"7":{"href":"/advanced/starknet#creating-and-verifying-a-test-proof-using-binaries","html":"\n<p>To create and verify a test proof, follow the next steps outlined in the <a href=\"https://github.com/dipdup-io/stone-packaging?tab=readme-ov-file#creating-and-verifying-a-test-proof-using-binaries\">Creating and Verifying a Test Proof Guide</a>.</p>\n<p>Clone the repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<p>Navigate to the example test directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<p>Copy or download the binary files from the latest release to this directory.</p>\n","isPage":false,"text":"\nTo create and verify a test proof, follow the next steps outlined in the Creating and Verifying a Test Proof Guide.\nClone the repository:\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\nNavigate to the example test directory:\ncd /tmp/stone-packaging/test_files/\nCopy or download the binary files from the latest release to this directory.\n","title":"Creating and Verifying a Test Proof Using Binaries","titles":[null,"Prerequisites"]},"8":{"href":"/advanced/starknet#splitting-the-proof","html":"\n<p>Run the following command to generate the annotated split proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params_integrity.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --generate_annotations</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<p>Run the verifier to verify the proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\nRun the following command to generate the annotated split proof:\ncpu_air_prover  --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params_integrity.json \\\n    --generate_annotations true\nThe proof will be available at fibonacci_proof.json.\nRun the verifier to verify the proof:\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Splitting the Proof","titles":[null,"Prerequisites"]},"9":{"href":"/advanced/starknet#stark_evm_adapter","html":"\n<p>Alternatively, you can use the <code>stark_evm_adapter</code> by following the next instructions shown <a href=\"https://github.com/zksecurity/stark-evm-adapter?tab=readme-ov-file#cli\">here</a>.</p>\n","isPage":false,"text":"\nAlternatively, you can use the stark_evm_adapter by following the next instructions shown here.\n","title":"stark_evm_adapter","titles":[null]},"10":{"href":"/advanced/starknet#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stark_evm_adapter</span></span></code></pre>\n","isPage":false,"text":"\ncargo install stark_evm_adapter\n","title":"Installation","titles":[null,"stark_evm_adapter"]},"11":{"href":"/advanced/starknet#usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stark_evm_adapter</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n","isPage":false,"text":"\nstark_evm_adapter --help\n","title":"Usage","titles":[null,"stark_evm_adapter"]},"12":{"href":"/advanced/starknet#example-using-stark_evm_adapter","html":"\n<p>To generate an annotated proof:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --in_file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof_annotation.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --extra-output-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_files/fibonacci_proof_annotation_extra.txt</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stark_evm_adapter</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gen-annotated-proof</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-proof-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof_annotation.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --stone-extra-annotation-file</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof_annotation_extra.txt</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --output</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span></span></code></pre>\n<ul>\n<li><code>stark_evm_adapter --stone-proof-file</code> comes from <code>cpu_air_prover --out_file</code> (JSON format)</li>\n<li><code>stark_evm_adapter --stone-annotation-file</code> comes from <code>cpu_air_verifier --annotation-file</code> (.txt format)</li>\n<li><code>stark_evm_adapter --stone-extra-annotation-file</code> comes from <code>cpu_air_verifier --extra-output-file</code> (.txt format)</li>\n</ul>\n<p>Proceed when receiving the next output:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Annotated</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wrote</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span></span></code></pre>\n","isPage":false,"text":"\nTo generate an annotated proof:\ncpu_air_verifier \\\n    --in_file test_files/fibonacci_proof.json \\\n    --annotation-file test_files/fibonacci_proof_annotation.txt \\\n    --extra-output-file test_files/fibonacci_proof_annotation_extra.txt\nstark_evm_adapter gen-annotated-proof \\\n    --stone-proof-file fibonacci_proof.json \\\n    --stone-annotation-file fibonacci_proof_annotation.txt \\\n    --stone-extra-annotation-file fibonacci_proof_annotation_extra.txt \\\n    --output fibonacci_annotated_proof.json\n\nstark_evm_adapter --stone-proof-file comes from cpu_air_prover --out_file (JSON format)\nstark_evm_adapter --stone-annotation-file comes from cpu_air_verifier --annotation-file (.txt format)\nstark_evm_adapter --stone-extra-annotation-file comes from cpu_air_verifier --extra-output-file (.txt format)\n\nProceed when receiving the next output:\nAnnotated proof wrote to fibonacci_annotated_proof.json\n","title":"Example Using stark_evm_adapter","titles":[null,"stark_evm_adapter"]},"13":{"href":"/advanced/starknet#utilizing-the-herodotus-integrity-file-to-serialize-the-proof","html":"\n<p>Clone the Herodotus Integrity repository for later procedures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/HerodotusDev/integrity.git</span></span></code></pre>\n<p>Alternatively, you can install the proof serializer tool directly:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/HerodotusDev/integrity</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof_serializer</span></span></code></pre>\n","isPage":false,"text":"\nClone the Herodotus Integrity repository for later procedures:\ngit clone https://github.com/HerodotusDev/integrity.git\nAlternatively, you can install the proof serializer tool directly:\ncargo install --git https://github.com/HerodotusDev/integrity proof_serializer\n","title":"Utilizing the Herodotus Integrity File to Serialize the Proof","titles":[null]},"14":{"href":"/advanced/starknet#serializing-the-proof","html":"\n<p>To serialize the proof, use the proof_serializer tool as follows:</p>\n<ul>\n<li>For the Original Proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">proof_serializer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_proof.json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_calldata</span></span></code></pre>\n<ul>\n<li>For the Annotated Proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">proof_serializer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_annotated_proof.json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fibonacci_calldata</span></span></code></pre>\n","isPage":false,"text":"\nTo serialize the proof, use the proof_serializer tool as follows:\n\nFor the Original Proof:\n\nproof_serializer &lt; fibonacci_proof.json &gt; fibonacci_calldata\n\nFor the Annotated Proof:\n\nproof_serializer &lt; fibonacci_annotated_proof.json &gt; fibonacci_calldata\n","title":"Serializing the Proof","titles":[null,"Utilizing the Herodotus Integrity File to Serialize the Proof"]},"15":{"href":"/advanced/starknet#setting-up-starknet-foundry","html":"\n<p>To interact with Starknet Foundry, set up your account and configuration as follows.</p>\n","isPage":false,"text":"\nTo interact with Starknet Foundry, set up your account and configuration as follows.\n","title":"Setting Up Starknet Foundry","titles":[null]},"16":{"href":"/advanced/starknet#acount-management","html":"\n<p>Refer to the following links for managing your Starknet Foundry account:</p>\n<p><a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/account.html\">Account Management</a>\n<a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/add.html\">Add account</a>\n<a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/create.html\">Create account</a></p>\n<p>Make sure you set up up your &#x27;snfoundry.toml&#x27; configuration with appropriate account name and RPC url inside your Integrity cloned repository.</p>\n","isPage":false,"text":"\nRefer to the following links for managing your Starknet Foundry account:\nAccount Management\nAdd account\nCreate account\nMake sure you set up up your &#x27;snfoundry.toml&#x27; configuration with appropriate account name and RPC url inside your Integrity cloned repository.\n","title":"Acount Management","titles":[null,"Setting Up Starknet Foundry"]},"17":{"href":"/advanced/starknet#deploying-your-account","html":"\n<p>Before deploying make sure you prefunded your account.</p>\n<p><a href=\"https://foundry-rs.github.io/starknet-foundry/appendix/sncast/account/deploy.html\">Deploy Account</a></p>\n<p>Execute the next <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#monolith-proof\">example</a> to check if the setup is correct.</p>\n","isPage":false,"text":"\nBefore deploying make sure you prefunded your account.\nDeploy Account\nExecute the next example to check if the setup is correct.\n","title":"Deploying Your Account","titles":[null,"Setting Up Starknet Foundry"]},"18":{"href":"/advanced/starknet#cairo-vm-verifier","html":"\n<p>For veryfing the proof.json you can utilize the next tool by pasting the proof.json file in the drop box, it&#x27;s made in Rust and WASM in JS: <a href=\"https://demo.swiftness.iosis.tech/\">cairo-vm-verifier</a></p>\n","isPage":false,"text":"\nFor veryfing the proof.json you can utilize the next tool by pasting the proof.json file in the drop box, it&#x27;s made in Rust and WASM in JS: cairo-vm-verifier\n","title":"Cairo-VM-Verifier","titles":[null]},"19":{"href":"/advanced/starknet#deploying-in-the-integrity-contracts-for-verification","html":"\n<p>Make sure you&#x27;re in the Integrity cloned repository.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> integrity</span></span></code></pre>\n<p>For verifying onchain with the Integrity contracts we will use the <code>verify-on-starknet.sh</code> script following the <a href=\"https://github.com/HerodotusDev/integrity/blob/main/deployed_contracts.md#main-contracts\">deployed contracts</a>.</p>\n<p>This is the main Herodotus example for testing.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./verify-on-starknet.sh</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> examples/calldata</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> recursive</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keccak_248_lsb</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stone5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cairo0</span></span></code></pre>\n<p>You can use the next configurations.</p>\n<ul>\n<li>layout: [<code>dex</code>, <code>recursive</code>, <code>recursive_with_poseidon</code>, <code>small</code>, <code>starknet</code>, <code>starknet_with_keccak</code>]</li>\n<li>hashers: [<code>keccak</code>, <code>blake2s</code>]</li>\n<li>cairo_version: [<code>cairo0</code>, <code>cairo1</code>]</li>\n<li>stone_version: [<code>stone5</code>, <code>stone6</code>]</li>\n</ul>\n<p>Hash function and hasher bit length are combined into one setting:</p>\n<ul>\n<li>hasher: [<code>keccak_160_lsb</code>, <code>blake2s_160</code>, <code>blake2s_248_lsb</code>]</li>\n</ul>\n<p>Following this let&#x27;s deploy our fibonacci_calldata in the Herodotus <a href=\"https://github.com/HerodotusDev/integrity?tab=readme-ov-file#factregistry-and-proxy-contract\">proxy contract</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./verify-on-starknet.sh</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    /home/&#x27;user&#x27;/stone-packaging/test_files/fibonacci_calldata</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    small</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    keccak_160_lsb</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    stone6</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    cairo1</span></span></code></pre>\n<p>Wait for the tx and you&#x27;ve made the verification in Starknet! :)</p>","isPage":false,"text":"\nMake sure you&#x27;re in the Integrity cloned repository.\ncd integrity\nFor verifying onchain with the Integrity contracts we will use the verify-on-starknet.sh script following the deployed contracts.\nThis is the main Herodotus example for testing.\n./verify-on-starknet.sh 0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a examples/calldata recursive keccak_248_lsb stone5 cairo0\nYou can use the next configurations.\n\nlayout: [dex, recursive, recursive_with_poseidon, small, starknet, starknet_with_keccak]\nhashers: [keccak, blake2s]\ncairo_version: [cairo0, cairo1]\nstone_version: [stone5, stone6]\n\nHash function and hasher bit length are combined into one setting:\n\nhasher: [keccak_160_lsb, blake2s_160, blake2s_248_lsb]\n\nFollowing this let&#x27;s deploy our fibonacci_calldata in the Herodotus proxy contract.\n./verify-on-starknet.sh \\\n    0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a \\\n    /home/&#x27;user&#x27;/stone-packaging/test_files/fibonacci_calldata \\\n    small \\\n    keccak_160_lsb \\\n    stone6 \\\n    cairo1\nWait for the tx and you&#x27;ve made the verification in Starknet! :)","title":"Deploying in the Integrity Contracts for Verification","titles":[null]},"20":{"href":"/install/binaries#stone-packaging---installation-guide","html":"</header>\n<p>This guide provides detailed instructions on how to download and install the <a href=\"https://github.com/starkware-libs/stone-prover\">Stone</a> binaries, based on your operating system (OS) and architecture so follow along.</p>\n","isPage":true,"text":"\nThis guide provides detailed instructions on how to download and install the Stone binaries, based on your operating system (OS) and architecture so follow along.\n","title":"Stone Packaging - Installation Guide","titles":[]},"21":{"href":"/install/binaries#supported-architectures","html":"\n<p>Stone binaries are available for the following architectures:</p>\n<ul>\n<li>\n<strong>x86_64 Linux</strong>\n</li>\n<li>\n<strong>ARM64 macOS</strong>\n</li>\n</ul>\n","isPage":false,"text":"\nStone binaries are available for the following architectures:\n\n\nx86_64 Linux\n\n\nARM64 macOS\n\n\n","title":"Supported Architectures","titles":["Stone Packaging - Installation Guide"]},"22":{"href":"/install/binaries#download-and-install-binaries","html":"\n","isPage":false,"text":"\n","title":"Download and Install Binaries","titles":["Stone Packaging - Installation Guide"]},"23":{"href":"/install/binaries#for-macos-arm64","html":"\n<ol>\n<li>Download the cpu_air_prover and cpu_air_verifier binaries:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-arm64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-arm64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"2\">\n<li>Make the binaries executable:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"3\">\n<li>Move the binaries to /usr/bin for system-wide access (optional):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span></code></pre>\n<p>This step is optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.</p>\n","isPage":false,"text":"\n\nDownload the cpu_air_prover and cpu_air_verifier binaries:\n\nwget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-arm64 -O /usr/local/bin/cpu_air_prover\nwget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-arm64 -O /usr/local/bin/cpu_air_verifier\n\nMake the binaries executable:\n\nchmod +x /usr/local/bin/cpu_air_prover\nchmod +x /usr/local/bin/cpu_air_verifier\n\nMove the binaries to /usr/bin for system-wide access (optional):\n\nsudo mv /usr/local/bin/cpu_air_prover /usr/bin/\nsudo mv /usr/local/bin/cpu_air_verifier /usr/bin/\nThis step is optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.\n","title":"For macOS (ARM64)","titles":["Stone Packaging - Installation Guide","Download and Install Binaries"]},"24":{"href":"/install/binaries#for-linux-x86_64","html":"\n<ol>\n<li>Download the <code>cpu_air_prover</code> and <code>cpu_air_verifier</code> binaries:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-x86_64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wget</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-x86_64</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"2\">\n<li>Make the binaries executable:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> chmod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> +x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span></span></code></pre>\n<ol start=\"3\">\n<li>Move the binaries to /usr/bin for system-wide access (optional):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/bin/cpu_air_verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/bin/</span></span></code></pre>\n<p>This step is actually optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.</p>\n","isPage":false,"text":"\n\nDownload the cpu_air_prover and cpu_air_verifier binaries:\n\nsudo wget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_prover-x86_64 -O /usr/local/bin/cpu_air_prover\nsudo wget https://github.com/dipdup-io/stone-packaging/releases/latest/download/cpu_air_verifier-x86_64 -O /usr/local/bin/cpu_air_verifier\n\nMake the binaries executable:\n\nsudo chmod +x /usr/local/bin/cpu_air_prover\nsudo chmod +x /usr/local/bin/cpu_air_verifier\n\nMove the binaries to /usr/bin for system-wide access (optional):\n\nsudo mv /usr/local/bin/cpu_air_prover /usr/bin/\nsudo mv /usr/local/bin/cpu_air_verifier /usr/bin/\nThis step is actually optional but recommended if you want to make the binaries globally available without adding /usr/local/bin to your PATH.\n","title":"For Linux (x86_64)","titles":["Stone Packaging - Installation Guide","Download and Install Binaries"]},"25":{"href":"/install/binaries#adding-stone-binaries-to-the-system-path","html":"\n<p>If you prefer to leave the binaries in /usr/local/bin or any other folder, you can add that folder to your system’s PATH variable. This will ensure that the binaries can be executed from any directory.</p>\n<ol>\n<li>Open your shell configuration file (e.g., .bashrc for bash, .zshrc for zsh):</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nano</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.bashrc</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # for bash users</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nano</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.zshrc</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # for zsh users</span></span></code></pre>\n<ol start=\"2\">\n<li>Add the following line to include /usr/local/bin in your PATH:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PATH</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/usr/local/bin:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$PATH</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span></code></pre>\n<ol start=\"3\">\n<li>Save and close the file, then reload your shell to apply the changes:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.bashrc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/.zshrc</span></span></code></pre>\n<p>This step ensures that binaries placed in /usr/local/bin can be accessed from anywhere in your system without needing to move them to /usr/bin.</p>\n","isPage":false,"text":"\nIf you prefer to leave the binaries in /usr/local/bin or any other folder, you can add that folder to your system’s PATH variable. This will ensure that the binaries can be executed from any directory.\n\nOpen your shell configuration file (e.g., .bashrc for bash, .zshrc for zsh):\n\nnano ~/.bashrc # for bash users\nnano ~/.zshrc # for zsh users\n\nAdd the following line to include /usr/local/bin in your PATH:\n\nexport PATH=&quot;/usr/local/bin:$PATH&quot;\n\nSave and close the file, then reload your shell to apply the changes:\n\nsource ~/.bashrc \n# or\nsource ~/.zshrc\nThis step ensures that binaries placed in /usr/local/bin can be accessed from anywhere in your system without needing to move them to /usr/bin.\n","title":"Adding Stone Binaries to the System PATH","titles":["Stone Packaging - Installation Guide"]},"26":{"href":"/install/binaries#verifying-installation","html":"\n<p>After placing the binaries or updating the PATH, you can verify the installation by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n<p>If you see usage information, then the installation is successful. Hope you&#x27;re smilling.</p>","isPage":false,"text":"\nAfter placing the binaries or updating the PATH, you can verify the installation by running:\ncpu_air_prover --help\ncpu_air_verifier --help\nIf you see usage information, then the installation is successful. Hope you&#x27;re smilling.","title":"Verifying Installation","titles":["Stone Packaging - Installation Guide","Adding Stone Binaries to the System PATH"]},"27":{"href":"/install/debian#installing-stone-on-ubuntudebian","html":"</header>\n<p>This guide provides instructions to install Stone from a <code>.deb</code> package on Ubuntu or Debian.</p>\n","isPage":true,"text":"\nThis guide provides instructions to install Stone from a .deb package on Ubuntu or Debian.\n","title":"Installing Stone on Ubuntu/Debian","titles":[]},"28":{"href":"/install/debian#prerequisites","html":"\n<ul>\n<li>A Debian-based system (recommended: Ubuntu 22.04 or Debian 11)</li>\n<li>Super user Privilege (sudo) access to install packages</li>\n</ul>\n","isPage":false,"text":"\n\nA Debian-based system (recommended: Ubuntu 22.04 or Debian 11)\nSuper user Privilege (sudo) access to install packages\n\n","title":"Prerequisites","titles":["Installing Stone on Ubuntu/Debian"]},"29":{"href":"/install/debian#step-1-download-the-stone-deb-package","html":"\n<p>Download the latest .deb package from the Stone Packaging Releases page or using <code>wget</code> to download it directly:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">wget</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -O</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover-linux-x86_64.deb</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging/releases/latest/download/stone-prover-linux-x86_64.deb</span></span></code></pre>\n","isPage":false,"text":"\nDownload the latest .deb package from the Stone Packaging Releases page or using wget to download it directly:\nwget -O /tmp/stone-prover-linux-x86_64.deb https://github.com/dipdup-io/stone-packaging/releases/latest/download/stone-prover-linux-x86_64.deb\n","title":"Step 1: Download the Stone .deb Package","titles":["Installing Stone on Ubuntu/Debian"]},"30":{"href":"/install/debian#step-2-installating-the-package","html":"\n<p><strong>Install the package:</strong> Run the following command to install Stone:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dpkg</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-prover-linux-x86_64.deb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span></code></pre>","isPage":false,"text":"\nInstall the package: Run the following command to install Stone:\nsudo dpkg -i /tmp/stone-prover-linux-x86_64.deb ","title":"Step 2: Installating the Package.","titles":["Installing Stone on Ubuntu/Debian"]},"31":{"href":"/install/docker#getting-stone-docker-images","html":"</header>\n<p>Stone provides Docker images to simplify the deployment and usage of its prover and verifier components. There are currently three available images, hosted on GitHub Packages.</p>\n","isPage":true,"text":"\nStone provides Docker images to simplify the deployment and usage of its prover and verifier components. There are currently three available images, hosted on GitHub Packages.\n","title":"Getting Stone Docker Images","titles":[]},"32":{"href":"/install/docker#available-images","html":"\n","isPage":false,"text":"\n","title":"Available Images","titles":["Getting Stone Docker Images"]},"33":{"href":"/install/docker#prover-image-lightweight","html":"\n<ul>\n<li>Contains only the Stone prover binary.</li>\n<li>Ideal for environments where only proving functionality is needed.</li>\n</ul>\n","isPage":false,"text":"\n\nContains only the Stone prover binary.\nIdeal for environments where only proving functionality is needed.\n\n","title":"Prover Image (Lightweight)","titles":["Getting Stone Docker Images","Available Images"]},"34":{"href":"/install/docker#verifier-image-lightweight","html":"\n<ul>\n<li>Contains only the Stone verifier binary.</li>\n<li>Perfect for setups requiring only verification capabilities.</li>\n</ul>\n","isPage":false,"text":"\n\nContains only the Stone verifier binary.\nPerfect for setups requiring only verification capabilities.\n\n","title":"Verifier Image (Lightweight)","titles":["Getting Stone Docker Images","Available Images"]},"35":{"href":"/install/docker#combined-image","html":"\n<ul>\n<li>Contains both the Stone prover and verifier binaries.</li>\n<li>Suitable for environments needing both proving and verification functionalities.</li>\n</ul>\n","isPage":false,"text":"\n\nContains both the Stone prover and verifier binaries.\nSuitable for environments needing both proving and verification functionalities.\n\n","title":"Combined Image","titles":["Getting Stone Docker Images","Available Images"]},"36":{"href":"/install/docker#accessing-the-images","html":"\n<p>You can find the Stone Docker images in the GitHub Packages repository:<br/>\n<a href=\"https://github.com/orgs/dipdup-io/packages?repo_name=stone-packaging\">GitHub Packages - Stone</a></p>\n","isPage":false,"text":"\nYou can find the Stone Docker images in the GitHub Packages repository:\nGitHub Packages - Stone\n","title":"Accessing the Images","titles":["Getting Stone Docker Images"]},"37":{"href":"/install/docker#pulling-the-images","html":"\n<p>To pull an image, use the <code>docker pull</code> command followed by the image name. Here are examples for each image:</p>\n<ul>\n<li>\n<strong>For the Stone Prover :</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:master</span></span></code></pre>\n<ul>\n<li>\n<strong>For the CPU Air Prover (Lightweight):</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/cpu_air_prover:master</span></span></code></pre>\n<ul>\n<li>\n<strong>For the CPU Air Verifier (Lightweight):</strong>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/cpu_air_verifier:master</span></span></code></pre>","isPage":false,"text":"\nTo pull an image, use the docker pull command followed by the image name. Here are examples for each image:\n\n\nFor the Stone Prover :\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:master\n\n\nFor the CPU Air Prover (Lightweight):\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/cpu_air_prover:master\n\n\nFor the CPU Air Verifier (Lightweight):\n\n\ndocker pull ghcr.io/dipdup-io/stone-packaging/cpu_air_verifier:master","title":"Pulling the Images","titles":["Getting Stone Docker Images"]},"38":{"href":"/usage/configuration#stone-prover-configuration","html":"\n<p>This guide will explain how to create a configuration file for the Stone prover, focusing on the security settings of the FRI protocol and the format of the configuration file. It also covers detailed instructions on configuring specific parameters for an optimal balance between security and performance.</p>\n","isPage":true,"text":"\nThis guide will explain how to create a configuration file for the Stone prover, focusing on the security settings of the FRI protocol and the format of the configuration file. It also covers detailed instructions on configuring specific parameters for an optimal balance between security and performance.\n","title":"Stone Prover Configuration","titles":[null]},"39":{"href":"/usage/configuration#1-overview-of-the-stone-prover-configuration","html":"\n<p>The Stone prover requires a configuration file to define critical proof generation settings. These settings control various aspects, from security to performance optimizations. Key components in the configuration file include:</p>\n<ul>\n<li>\n<p>Proof Options: Parameters for the FRI protocol, low-degree polynomial commitment, and Merkle tree depth.</p>\n</li>\n<li>\n<p>Optimization Settings: Settings for parallelization and memory allocation.</p>\n</li>\n</ul>\n<p>Proper configuration ensures that the prover operates within the desired security constraints while making efficient use of computational resources.</p>\n","isPage":false,"text":"\nThe Stone prover requires a configuration file to define critical proof generation settings. These settings control various aspects, from security to performance optimizations. Key components in the configuration file include:\n\n\nProof Options: Parameters for the FRI protocol, low-degree polynomial commitment, and Merkle tree depth.\n\n\nOptimization Settings: Settings for parallelization and memory allocation.\n\n\nProper configuration ensures that the prover operates within the desired security constraints while making efficient use of computational resources.\n","title":"1. Overview of the Stone Prover Configuration","titles":[null,"Stone Prover Configuration"]},"40":{"href":"/usage/configuration#2-security-settings-for-the-fri-protocol","html":"\n<p>The <strong>Fast Reed-Solomon Interactive Oracle Proof (FRI)</strong> protocol is used to prove that a function is a low-degree polynomial. It ensures the integrity of the proof while keeping computational overhead low. The following are critical security settings that should be adjusted based on your requirements:</p>\n","isPage":false,"text":"\nThe Fast Reed-Solomon Interactive Oracle Proof (FRI) protocol is used to prove that a function is a low-degree polynomial. It ensures the integrity of the proof while keeping computational overhead low. The following are critical security settings that should be adjusted based on your requirements:\n","title":"2. Security Settings for the FRI Protocol","titles":[null,"Stone Prover Configuration"]},"41":{"href":"/usage/configuration#21-key-parameters-for-the-fri-protocol","html":"\n","isPage":false,"text":"\n","title":"2.1 Key Parameters for the FRI Protocol","titles":[null,"Stone Prover Configuration"]},"42":{"href":"/usage/configuration#211-security-level-security_bits","html":"\n<p>This setting determines the cryptographic security strength in bits. A higher number means that the proof is more secure, but it also requires more computational resources. This value typically ranges between <strong>80</strong> and <strong>256</strong> bits:</p>\n<ul>\n<li>\n<p><strong>Low Security (80-128 bits)</strong> : Suitable for environments where performance is more important than strong security. Useful in development or non-sensitive environments.</p>\n</li>\n<li>\n<p><strong>High Security (128-256 bits)</strong> : Suitable for production environments where high levels of cryptographic security are necessary.</p>\n</li>\n</ul>\n<p><strong>Example</strong>: For strong cryptographic security, a 128-bit security level is common:</p>\n<p><code>security_bits&quot;: 128</code></p>\n","isPage":false,"text":"\nThis setting determines the cryptographic security strength in bits. A higher number means that the proof is more secure, but it also requires more computational resources. This value typically ranges between 80 and 256 bits:\n\n\nLow Security (80-128 bits) : Suitable for environments where performance is more important than strong security. Useful in development or non-sensitive environments.\n\n\nHigh Security (128-256 bits) : Suitable for production environments where high levels of cryptographic security are necessary.\n\n\nExample: For strong cryptographic security, a 128-bit security level is common:\nsecurity_bits&quot;: 128\n","title":"2.1.1 Security Level (security_bits)","titles":[null,"Stone Prover Configuration"]},"43":{"href":"/usage/configuration#212-expansion-factor-expansion_factor","html":"\n<p>The expansion factor dictates how much redundancy is added during Reed-Solomon encoding. The goal is to increase error detection capabilities in the proof. The higher the expansion factor, the larger the proof, but the more secure and error-resilient it is.</p>\n<ul>\n<li><strong>Small Expansion Factor (2-4)</strong> : Faster proof generation but lower error detection.</li>\n<li><strong>Large Expansion Factor (8-16)</strong> : Stronger error detection but increases proof size and generation time.</li>\n</ul>\n<p><strong>Example</strong> : An expansion factor of 4 provides a good balance between performance and security:</p>\n<p><code>&quot;expansion_factor&quot;: 4</code></p>\n","isPage":false,"text":"\nThe expansion factor dictates how much redundancy is added during Reed-Solomon encoding. The goal is to increase error detection capabilities in the proof. The higher the expansion factor, the larger the proof, but the more secure and error-resilient it is.\n\nSmall Expansion Factor (2-4) : Faster proof generation but lower error detection.\nLarge Expansion Factor (8-16) : Stronger error detection but increases proof size and generation time.\n\nExample : An expansion factor of 4 provides a good balance between performance and security:\n&quot;expansion_factor&quot;: 4\n","title":"2.1.2 Expansion Factor (expansion_factor)","titles":[null,"Stone Prover Configuration"]},"44":{"href":"/usage/configuration#213-blow-up-factor-blowup_factor","html":"\n<p>The blow-up factor defines how much data is added to the original data for Reed-Solomon encoding. This setting influences both the security and efficiency of the proof generation process. A higher blow-up factor increases the security of the proof by ensuring a larger gap between the original data and the error correction data.</p>\n<ul>\n<li><strong>Low Blow-up Factor (2-8)</strong> : Lower security but better performance.</li>\n<li><strong>High Blow-up Factor (16-32)</strong> : Provides a higher level of security but increases the computational load.</li>\n</ul>\n<p><strong>Example</strong>: A blow-up factor of 16 is a commonly used value for balanced performance:</p>\n<p><code>&quot;blowup_factor&quot;: 16</code></p>\n","isPage":false,"text":"\nThe blow-up factor defines how much data is added to the original data for Reed-Solomon encoding. This setting influences both the security and efficiency of the proof generation process. A higher blow-up factor increases the security of the proof by ensuring a larger gap between the original data and the error correction data.\n\nLow Blow-up Factor (2-8) : Lower security but better performance.\nHigh Blow-up Factor (16-32) : Provides a higher level of security but increases the computational load.\n\nExample: A blow-up factor of 16 is a commonly used value for balanced performance:\n&quot;blowup_factor&quot;: 16\n","title":"2.1.3 Blow-up Factor (blowup_factor)","titles":[null,"Stone Prover Configuration"]},"45":{"href":"/usage/configuration#214-number-of-queries-num_queries","html":"\n<p>The number of queries refers to how many times the verifier queries different parts of the proof during verification. More queries lead to higher security by decreasing the probability that a verifier will miss any fraudulent proofs, but it increases the time required to verify the proof.</p>\n<ul>\n<li><strong>Low Query Count (10-20)</strong> : Provides faster verification but lower security.</li>\n<li><strong>High Query Count (25-50)</strong> : Provides better security but increases verification time.</li>\n</ul>\n<p>Example: Setting 30 queries strikes a reasonable balance between verification time and security:</p>\n<p><code>&quot;num_queries&quot;: 30</code></p>\n<strong>3. Configuration File Format</strong>\n<p>The configuration file for the Stone prover is written in JSON format. This file contains all the necessary parameters for configuring the prover, including FRI settings, proof optimizations, and resource management.</p>\n<p><strong>3.1 Example Configuration File</strong>\nBelow is a full example of a configuration file with explanations for each section:</p>\n<p>json</p>\n<p><code>{   &quot;proof_options&quot;: {     &quot;fri_protocol&quot;: {       &quot;security_bits&quot;: 128,       &quot;expansion_factor&quot;: 4,       &quot;blowup_factor&quot;: 16,       &quot;num_queries&quot;: 30     },     &quot;lpc_degree_bound&quot;: 512,     &quot;merkle_tree_depth&quot;: 20   },   &quot;optimization&quot;: {     &quot;max_threads&quot;: 8,     &quot;cache_size&quot;: &quot;256MB&quot;   } }</code></p>\n","isPage":false,"text":"\nThe number of queries refers to how many times the verifier queries different parts of the proof during verification. More queries lead to higher security by decreasing the probability that a verifier will miss any fraudulent proofs, but it increases the time required to verify the proof.\n\nLow Query Count (10-20) : Provides faster verification but lower security.\nHigh Query Count (25-50) : Provides better security but increases verification time.\n\nExample: Setting 30 queries strikes a reasonable balance between verification time and security:\n&quot;num_queries&quot;: 30\n3. Configuration File Format\nThe configuration file for the Stone prover is written in JSON format. This file contains all the necessary parameters for configuring the prover, including FRI settings, proof optimizations, and resource management.\n3.1 Example Configuration File\nBelow is a full example of a configuration file with explanations for each section:\njson\n{   &quot;proof_options&quot;: {     &quot;fri_protocol&quot;: {       &quot;security_bits&quot;: 128,       &quot;expansion_factor&quot;: 4,       &quot;blowup_factor&quot;: 16,       &quot;num_queries&quot;: 30     },     &quot;lpc_degree_bound&quot;: 512,     &quot;merkle_tree_depth&quot;: 20   },   &quot;optimization&quot;: {     &quot;max_threads&quot;: 8,     &quot;cache_size&quot;: &quot;256MB&quot;   } }\n","title":"2.1.4 Number of Queries (num_queries)","titles":[null,"Stone Prover Configuration"]},"46":{"href":"/usage/configuration#32-detailed-breakdown-of-configuration-parameters","html":"\n<ul>\n<li>\n<p><code>proof_options</code>: This section contains settings related to the proof generation process, including FRI protocol parameters and other proof-related settings.</p>\n</li>\n<li>\n<p><code>fri_protocol</code>: Contains the key security settings for the FRI protocol. This includes:</p>\n<ul>\n<li><code>security_bits</code>: The security level in bits (e.g., 128).</li>\n<li><code>expansion_factor</code>: The redundancy factor for Reed-Solomon encoding (e.g., 4).</li>\n<li><code>blowup_factor</code>: The blow-up factor for error correction (e.g., 16).</li>\n<li><code>num_queries</code>: The number of verification queries to improve security (e.g., 30).</li>\n</ul>\n</li>\n<li>\n<p><code>lpc_degree_bound</code>: Defines the degree bound for the low-degree polynomial commitment (LPC). This setting limits the degree of the polynomial being committed to. The higher this value, the more complex the proofs will be, but it also increases the proof size.</p>\n<ul>\n<li>Example: <code>512</code></li>\n</ul>\n</li>\n<li>\n<p><code>merkle_tree_depth</code>: The depth of the Merkle tree used in the proof. A deeper Merkle tree allows for better security but increases both memory usage and computation time.</p>\n<ul>\n<li>Example: <code>20</code></li>\n</ul>\n</li>\n<li>\n<p><code>optimization</code>: This section contains parameters for optimizing prover performance.</p>\n<ul>\n<li>\n<p><code>max_threads</code>: Specifies the number of threads the prover can use to parallelize proof generation. More threads can speed up proof generation, especially on multi-core processors.</p>\n</li>\n<li>\n<p>Example: <code>8</code> (for an 8-core processor)</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>cache_size</code>: Defines the amount of memory allocated for caching intermediate proof data. A larger cache reduces the number of reads/writes to disk, speeding up the process.</p>\n<ul>\n<li>Example: <code>&quot;256MB&quot;</code> for medium-sized caches.</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nproof_options: This section contains settings related to the proof generation process, including FRI protocol parameters and other proof-related settings.\n\n\nfri_protocol: Contains the key security settings for the FRI protocol. This includes:\n\nsecurity_bits: The security level in bits (e.g., 128).\nexpansion_factor: The redundancy factor for Reed-Solomon encoding (e.g., 4).\nblowup_factor: The blow-up factor for error correction (e.g., 16).\nnum_queries: The number of verification queries to improve security (e.g., 30).\n\n\n\nlpc_degree_bound: Defines the degree bound for the low-degree polynomial commitment (LPC). This setting limits the degree of the polynomial being committed to. The higher this value, the more complex the proofs will be, but it also increases the proof size.\n\nExample: 512\n\n\n\nmerkle_tree_depth: The depth of the Merkle tree used in the proof. A deeper Merkle tree allows for better security but increases both memory usage and computation time.\n\nExample: 20\n\n\n\noptimization: This section contains parameters for optimizing prover performance.\n\n\nmax_threads: Specifies the number of threads the prover can use to parallelize proof generation. More threads can speed up proof generation, especially on multi-core processors.\n\n\nExample: 8 (for an 8-core processor)\n\n\n\n\ncache_size: Defines the amount of memory allocated for caching intermediate proof data. A larger cache reduces the number of reads/writes to disk, speeding up the process.\n\nExample: &quot;256MB&quot; for medium-sized caches.\n\n\n\n","title":"3.2 Detailed Breakdown of Configuration Parameters","titles":[null,"Stone Prover Configuration"]},"47":{"href":"/usage/configuration#4-how-to-create-a-configuration-file","html":"\n<p><strong>4.1 Set the FRI Protocol Parameters</strong>\nChoose appropriate values for the FRI protocol parameters based on your desired security level. As a starting point, you can use the following recommendations:</p>\n<ul>\n<li>Security Level: 128 bits for strong cryptographic security.</li>\n<li>Expansion Factor: 4 for a balance of security and efficiency.</li>\n<li>Blow-up Factor: 16 for solid error-correction without excessive overhead.</li>\n<li>Number of Queries: 30 for high security.</li>\n</ul>\n<strong>4.2 Configure the Proof Options</strong>\n<p>Adjust proof options such as the LPC degree bound and the Merkle tree depth. For example:</p>\n<ul>\n<li>\n<p>LPC Degree Bound : A value of 512 works well for most general-purpose applications.</p>\n</li>\n<li>\n<p>Merkle Tree Depth : A value of 20 is a good balance between security and performance.</p>\n</li>\n</ul>\n<p><strong>4.3 Optimize Performance</strong>\nTo optimize the prover’s performance, adjust the number of threads and cache size based on your hardware capabilities:</p>\n<ul>\n<li>Max Threads : Set this to the number of CPU cores available (e.g., 8 for an 8-core processor).</li>\n<li>Cache Size : Allocate an appropriate amount of memory for caching. A value of <code>256MB</code> is a good starting point for most systems.</li>\n</ul>\n<p><strong>4.4 Save the Configuration File</strong>\nSave your configuration file in JSON format. For example, create a file named <code>stone_prover_config.json</code> and include your customized parameters.</p>","isPage":false,"text":"\n4.1 Set the FRI Protocol Parameters\nChoose appropriate values for the FRI protocol parameters based on your desired security level. As a starting point, you can use the following recommendations:\n\nSecurity Level: 128 bits for strong cryptographic security.\nExpansion Factor: 4 for a balance of security and efficiency.\nBlow-up Factor: 16 for solid error-correction without excessive overhead.\nNumber of Queries: 30 for high security.\n\n4.2 Configure the Proof Options\nAdjust proof options such as the LPC degree bound and the Merkle tree depth. For example:\n\n\nLPC Degree Bound : A value of 512 works well for most general-purpose applications.\n\n\nMerkle Tree Depth : A value of 20 is a good balance between security and performance.\n\n\n4.3 Optimize Performance\nTo optimize the prover’s performance, adjust the number of threads and cache size based on your hardware capabilities:\n\nMax Threads : Set this to the number of CPU cores available (e.g., 8 for an 8-core processor).\nCache Size : Allocate an appropriate amount of memory for caching. A value of 256MB is a good starting point for most systems.\n\n4.4 Save the Configuration File\nSave your configuration file in JSON format. For example, create a file named stone_prover_config.json and include your customized parameters.","title":"4. How to Create a Configuration File","titles":[null,"Stone Prover Configuration"]},"48":{"href":"/usage/proving#creating-and-verifying-a-proof-running-stone-prover","html":"</header>\n<p>This guide provides step-by-step instructions on how to use the Stone Prover to create and verify proofs for Cairo programs.This guide is based on the official <a href=\"https://github.com/starkware-libs/stone-prover?tab=readme-ov-file#creating-and-verifying-a-proof-of-a-cairo-program\">Stone Prover documentation</a>.</p>\n","isPage":true,"text":"\nThis guide provides step-by-step instructions on how to use the Stone Prover to create and verify proofs for Cairo programs.This guide is based on the official Stone Prover documentation.\n","title":"Creating and verifying a proof Running Stone Prover","titles":[]},"49":{"href":"/usage/proving#creating-and-verifying-a-proof","html":"\n<p>To create and verify a proof using Stone Prover, follow these steps:</p>\n<ul>\n<li>Clone/download the repository:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ul>\n<li>Navigate to the example test directory</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<ul>\n<li>Download or Copy the Binary Files:</li>\n</ul>\n<p>To download binaries, please refer to the <a href=\"../install/binaries.md\">Installation Guide</a></p>\n<ul>\n<li>Run the prover to generate a proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params.json</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<ul>\n<li>Run the verifier to verify the proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\nTo create and verify a proof using Stone Prover, follow these steps:\n\nClone/download the repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nNavigate to the example test directory\n\ncd /tmp/stone-packaging/test_files/\n\nDownload or Copy the Binary Files:\n\nTo download binaries, please refer to the Installation Guide\n\nRun the prover to generate a proof:\n\ncpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json\nThe proof will be available at fibonacci_proof.json.\n\nRun the verifier to verify the proof:\n\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Creating and Verifying a Proof","titles":["Creating and verifying a proof Running Stone Prover"]},"50":{"href":"/usage/proving#download-minimal-docker-images-for-x86_64","html":"\n<p>Download the Docker image. The stone-prover package includes both <code>cpu_air_prover</code> and <code>cpu_air_verifier</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:latest</span></span></code></pre>\n","isPage":false,"text":"\nDownload the Docker image. The stone-prover package includes both cpu_air_prover and cpu_air_verifier:\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:latest\n","title":"Download Minimal Docker Images for x86_64","titles":["Creating and verifying a proof Running Stone Prover"]},"51":{"href":"/usage/proving#creating-and-verifying-a-test-proof-using-docker","html":"\n<ul>\n<li>First, ensure Docker is installed on your machine. For installation instructions, check <a href=\"https://docs.docker.com/get-docker/\">Docker’s official documentation</a></li>\n</ul>\n<ol>\n<li>Clone the Repository:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the Docker Container to generate the Proof</li>\n</ol>\n<p>Run the container with a volume mounted to the local repository directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_prover </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --out_file=fibonacci_proof.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --private_input_file=fibonacci_private_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --public_input_file=fibonacci_public_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --prover_config_file=cpu_air_prover_config.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --parameter_file=cpu_air_params.json&quot;</span></span></code></pre>\n<p>The proof will be created at <code>test_files/fibonacci_proof.json.</code>.</p>\n<ol start=\"3\">\n<li>Run the verifier to validate the Proof Using Docker</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;</span></span></code></pre>","isPage":false,"text":"\n\nFirst, ensure Docker is installed on your machine. For installation instructions, check Docker’s official documentation\n\n\nClone the Repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nRun the Docker Container to generate the Proof\n\nRun the container with a volume mounted to the local repository directory:\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json&quot;\nThe proof will be created at test_files/fibonacci_proof.json..\n\nRun the verifier to validate the Proof Using Docker\n\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;","title":"Creating and Verifying a Test Proof Using Docker","titles":["Creating and verifying a proof Running Stone Prover"]},"52":{"href":"/usage/verifying#verifying-stone-proof-using-the-binary","html":"</header>\n<p>This guide will walk you through how to verify a Stone proof using the provided binaries. It includes steps for both setting up the environment using Docker and manually installing the required dependencies.</p>\n","isPage":true,"text":"\nThis guide will walk you through how to verify a Stone proof using the provided binaries. It includes steps for both setting up the environment using Docker and manually installing the required dependencies.\n","title":"Verifying Stone Proof Using the Binary","titles":[]},"53":{"href":"/usage/verifying#creating-and-verifying-a-test-proof-using-binaries","html":"\n<ul>\n<li>Clone the repository:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ul>\n<li>Navigate to the example test directory</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files/</span></span></code></pre>\n<ul>\n<li>Download the Binary Files:</li>\n</ul>\n<p>To download binaries, please refer to the <a href=\"../install/binaries.md\">Installation Guide</a></p>\n<ul>\n<li>Run the prover:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_prover</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --out_file=fibonacci_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private_input_file=fibonacci_private_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --public_input_file=fibonacci_public_input.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --prover_config_file=cpu_air_prover_config.json</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --parameter_file=cpu_air_params.json</span></span></code></pre>\n<p>The proof will be available at <code>fibonacci_proof.json</code>.</p>\n<ul>\n<li>Run the verifier to verify the proof:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cpu_air_verifier</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --in_file=fibonacci_proof.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Successfully verified example proof.&quot;</span></span></code></pre>\n","isPage":false,"text":"\n\nClone the repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nNavigate to the example test directory\n\ncd /tmp/stone-packaging/test_files/\n\nDownload the Binary Files:\n\nTo download binaries, please refer to the Installation Guide\n\nRun the prover:\n\ncpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json\nThe proof will be available at fibonacci_proof.json.\n\nRun the verifier to verify the proof:\n\ncpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &quot;Successfully verified example proof.&quot;\n","title":"Creating and Verifying a Test Proof Using Binaries","titles":["Verifying Stone Proof Using the Binary"]},"54":{"href":"/usage/verifying#download-minimal-docker-images-for-x86_64","html":"\n<p>Download the Docker image. The stone-prover package includes both <code>cpu_air_prover</code> and <code>cpu_air_verifier</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover:latest</span></span></code></pre>\n","isPage":false,"text":"\nDownload the Docker image. The stone-prover package includes both cpu_air_prover and cpu_air_verifier:\ndocker pull ghcr.io/dipdup-io/stone-packaging/stone-prover:latest\n","title":"Download Minimal Docker Images for x86_64","titles":["Verifying Stone Proof Using the Binary"]},"55":{"href":"/usage/verifying#creating-and-verifying-a-test-proof-using-docker","html":"\n<ul>\n<li>Ensure Docker is installed on your machine. You can refer to <a href=\"https://docs.docker.com/get-docker/\">Docker’s official documentation</a> for installation instructions.</li>\n</ul>\n<ol>\n<li>Clone the Repository:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/dipdup-io/stone-packaging.git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the Docker Container to Create the Proof</li>\n</ol>\n<p>Run the container with a volume mounted to the local repository directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_prover </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --out_file=fibonacci_proof.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --private_input_file=fibonacci_private_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --public_input_file=fibonacci_public_input.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --prover_config_file=cpu_air_prover_config.json </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    --parameter_file=cpu_air_params.json&quot;</span></span></code></pre>\n<p>The proof will be created at <code>test_files/fibonacci_proof.json.</code>.</p>\n<ol start=\"3\">\n<li>Verify the Proof Using Docker</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --entrypoint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /bin/bash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /tmp/stone-packaging/test_files:/app/prover</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/dipdup-io/stone-packaging/stone-prover</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;</span></span></code></pre>","isPage":false,"text":"\n\nEnsure Docker is installed on your machine. You can refer to Docker’s official documentation for installation instructions.\n\n\nClone the Repository:\n\ngit clone https://github.com/dipdup-io/stone-packaging.git /tmp/stone-packaging\n\nRun the Docker Container to Create the Proof\n\nRun the container with a volume mounted to the local repository directory:\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_prover \\\n    --out_file=fibonacci_proof.json \\\n    --private_input_file=fibonacci_private_input.json \\\n    --public_input_file=fibonacci_public_input.json \\\n    --prover_config_file=cpu_air_prover_config.json \\\n    --parameter_file=cpu_air_params.json&quot;\nThe proof will be created at test_files/fibonacci_proof.json..\n\nVerify the Proof Using Docker\n\ndocker run --entrypoint /bin/bash -v /tmp/stone-packaging/test_files:/app/prover ghcr.io/dipdup-io/stone-packaging/stone-prover -c &quot;cd /app/prover &amp;&amp; exec cpu_air_verifier --in_file=fibonacci_proof.json &amp;&amp; echo &#x27;Successfully verified example proof.&#x27;&quot;","title":"Creating and Verifying a Test Proof Using Docker","titles":["Verifying Stone Proof Using the Binary"]}},"dirtCount":0,"index":[["512",{"2":{"45":1,"46":1,"47":1}}],["50",{"2":{"45":1}}],["query",{"2":{"45":2}}],["queries",{"0":{"45":2},"2":{"45":6,"46":2,"47":1}}],["quot",{"2":{"3":2,"8":2,"25":2,"42":1,"43":2,"44":2,"45":26,"46":2,"49":2,"51":4,"53":2,"55":4}}],["30",{"2":{"45":3,"46":1,"47":1}}],["32",{"2":{"44":1}}],["3",{"0":{"44":1,"46":1},"2":{"45":2,"47":1}}],["8",{"2":{"43":1,"44":1,"45":1,"46":2,"47":2}}],["80",{"2":{"42":2}}],["4",{"0":{"45":1,"47":1},"2":{"43":3,"45":1,"46":1,"47":6}}],["10",{"2":{"45":1}}],["16",{"2":{"43":1,"44":3,"45":1,"46":1,"47":1}}],["160",{"2":{"19":3}}],["128",{"2":{"42":4,"45":1,"46":1,"47":1}}],["1",{"0":{"29":1,"39":1,"41":1,"42":2,"43":1,"44":1,"45":1},"2":{"45":1,"47":1}}],["11",{"2":{"28":1}}],["04",{"2":{"28":1}}],["0x16409cfef9b6c3e6002133b61c59d09484594b37b8e4daef7dcba5495a0ef1a",{"2":{"19":2}}],["25",{"2":{"45":1}}],["256mb",{"2":{"45":1,"46":1,"47":1}}],["256",{"2":{"42":2}}],["20",{"2":{"45":2,"46":1,"47":1}}],["2",{"0":{"30":1,"40":1,"41":1,"42":1,"43":2,"44":1,"45":1,"46":1},"2":{"43":1,"44":1,"47":1}}],["22",{"2":{"28":1}}],["248",{"2":{"19":2}}],["$path",{"2":{"25":1}}],["~",{"2":{"25":4}}],["zsh",{"2":{"25":2}}],["zshrc",{"2":{"25":3}}],["minimal",{"0":{"50":1,"54":1}}],["miss",{"2":{"45":1}}],["multi",{"2":{"46":1}}],["much",{"2":{"43":1,"44":1}}],["mounted",{"2":{"51":1,"55":1}}],["most",{"2":{"47":2}}],["more",{"2":{"42":3,"43":1,"45":1,"46":2}}],["move",{"2":{"23":1,"24":1,"25":1}}],["medium",{"2":{"46":1}}],["means",{"2":{"42":1}}],["memory",{"2":{"39":1,"46":2,"47":1}}],["merkle",{"2":{"39":1,"45":1,"46":3,"47":2}}],["mv",{"2":{"23":2,"24":2}}],["machine",{"2":{"51":1,"55":1}}],["macos",{"0":{"23":1},"2":{"21":1}}],["max",{"2":{"45":1,"46":1,"47":1}}],["making",{"2":{"39":1}}],["make",{"2":{"5":1,"16":1,"17":1,"19":1,"23":2,"24":2}}],["master",{"2":{"37":3}}],["made",{"2":{"18":1,"19":1}}],["madara",{"2":{"3":2}}],["manually",{"2":{"52":1}}],["many",{"2":{"45":1}}],["managing",{"2":{"16":1}}],["management",{"0":{"16":1},"2":{"16":1,"45":1}}],["manipulate",{"2":{"3":1}}],["main",{"2":{"2":1,"19":1}}],["+x",{"2":{"23":2,"24":2}}],["64",{"0":{"24":1,"50":1,"54":1},"2":{"21":1,"24":2,"29":2,"30":1}}],["x86",{"0":{"24":1,"50":1,"54":1},"2":{"21":1,"24":2,"29":2,"30":1}}],["x27",{"2":{"0":1,"2":1,"16":2,"18":1,"19":5,"26":1,"51":2,"55":2}}],["keeping",{"2":{"40":1}}],["keeps",{"2":{"3":1}}],["key",{"0":{"41":1},"2":{"39":1,"46":1}}],["keccak",{"2":{"19":5}}],["js",{"2":{"18":1}}],["json",{"2":{"3":1,"8":7,"12":5,"14":2,"18":2,"45":2,"47":2,"49":7,"51":7,"53":7,"55":7}}],["v",{"2":{"51":2,"55":2}}],["volume",{"2":{"51":1,"55":1}}],["validate",{"2":{"51":1}}],["values",{"2":{"47":1}}],["value",{"2":{"42":1,"44":1,"46":1,"47":3}}],["various",{"2":{"39":1}}],["variable",{"2":{"25":1}}],["ve",{"2":{"19":1}}],["version",{"2":{"19":2}}],["veryfing",{"2":{"18":1}}],["verify",{"2":{"7":1,"8":1,"19":3,"26":1,"45":1,"48":1,"49":2,"52":1,"53":1,"55":1}}],["verifying",{"0":{"4":1,"7":1,"26":1,"48":1,"49":1,"51":1,"52":1,"53":1,"55":1},"1":{"49":1,"50":1,"51":1,"53":1,"54":1,"55":1},"2":{"3":1,"4":1,"7":1,"19":1}}],["verification",{"0":{"19":1},"2":{"4":1,"19":1,"34":1,"35":1,"45":4,"46":1}}],["verified",{"2":{"3":1,"8":1,"49":1,"51":1,"53":1,"55":1}}],["verifier",{"0":{"18":1,"34":1},"2":{"3":2,"8":2,"12":3,"18":1,"23":5,"24":5,"26":1,"31":1,"34":1,"35":1,"37":2,"45":2,"49":2,"50":1,"51":2,"53":2,"54":1,"55":1}}],["vm",{"0":{"18":1},"2":{"18":1}}],["num",{"0":{"45":1},"2":{"45":2,"46":1}}],["number",{"0":{"45":1},"2":{"42":1,"45":1,"46":3,"47":3}}],["non",{"2":{"42":1}}],["nano",{"2":{"25":2}}],["named",{"2":{"47":1}}],["name",{"2":{"16":1,"37":1}}],["navigate",{"2":{"7":1,"49":1,"53":1}}],["next",{"2":{"5":1,"6":1,"7":1,"9":1,"12":1,"17":1,"18":1,"19":1}}],["necessary",{"2":{"3":1,"42":1,"45":1}}],["needed",{"2":{"33":1}}],["needing",{"2":{"25":1,"35":1}}],["need",{"2":{"3":1}}],["gap",{"2":{"44":1}}],["good",{"2":{"43":1,"47":2}}],["goal",{"2":{"43":1}}],["ghcr",{"2":{"37":3,"50":1,"51":2,"54":1,"55":2}}],["g",{"2":{"25":1,"46":4,"47":1}}],["globally",{"2":{"23":1,"24":1}}],["gt",{"2":{"14":2}}],["github",{"2":{"7":1,"13":2,"23":2,"24":2,"29":1,"31":1,"36":2,"49":1,"51":1,"53":1,"55":1}}],["git",{"2":{"7":2,"13":3,"49":2,"51":2,"53":2,"55":2}}],["guide",{"0":{"20":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"2":{"4":1,"6":1,"7":1,"20":1,"27":1,"38":1,"48":2,"49":1,"52":1,"53":1}}],["general",{"2":{"47":1}}],["generation",{"2":{"39":1,"43":2,"44":1,"46":3}}],["generatorthis",{"2":{"3":1}}],["generated",{"2":{"3":1}}],["generate",{"2":{"3":4,"8":2,"12":1,"49":1,"51":1}}],["gen",{"2":{"12":1}}],["getting",{"0":{"1":1,"31":1},"1":{"32":1,"33":1,"34":1,"35":1,"36":1,"37":1}}],["during",{"2":{"43":1,"45":1}}],["dpkg",{"2":{"30":1}}],["drop",{"2":{"18":1}}],["disk",{"2":{"46":1}}],["dictates",{"2":{"43":1}}],["directly",{"2":{"13":1,"29":1}}],["directory",{"2":{"7":2,"25":1,"49":1,"51":1,"53":1,"55":1}}],["dipdup",{"2":{"7":1,"23":2,"24":2,"29":1,"37":3,"49":1,"50":1,"51":3,"53":1,"54":1,"55":3}}],["different",{"2":{"3":1,"45":1}}],["decreasing",{"2":{"45":1}}],["development",{"2":{"42":1}}],["detection",{"2":{"43":3}}],["determines",{"2":{"42":1}}],["detailed",{"0":{"46":1},"2":{"4":1,"20":1,"38":1}}],["desired",{"2":{"39":1,"47":1}}],["degree",{"2":{"39":1,"40":1,"45":1,"46":4,"47":2}}],["defines",{"2":{"44":1,"46":2}}],["define",{"2":{"39":1}}],["deb",{"0":{"29":1},"2":{"27":1,"29":3,"30":1}}],["debian",{"0":{"27":1},"1":{"28":1,"29":1,"30":1},"2":{"27":1,"28":2}}],["dex",{"2":{"19":1}}],["depth",{"2":{"39":1,"45":1,"46":2,"47":2}}],["dependencies",{"2":{"5":1,"52":1}}],["deployment",{"2":{"31":1}}],["deployed",{"2":{"19":1}}],["deploying",{"0":{"17":1,"19":1},"2":{"17":1}}],["deploy",{"2":{"4":1,"17":1,"19":1}}],["deeper",{"2":{"3":1,"46":1}}],["delve",{"2":{"3":1}}],["data",{"2":{"3":1,"44":4,"46":1}}],["docker",{"0":{"31":1,"50":1,"51":1,"54":1,"55":1},"1":{"32":1,"33":1,"34":1,"35":1,"36":1,"37":1},"2":{"31":1,"36":1,"37":4,"50":2,"51":6,"52":1,"54":2,"55":6}}],["documentation",{"2":{"2":1,"3":1,"48":1,"51":1,"55":1}}],["download",{"0":{"6":1,"22":1,"29":1,"50":1,"54":1},"1":{"23":1,"24":1},"2":{"3":1,"7":1,"20":1,"23":3,"24":3,"29":3,"49":3,"50":1,"53":2,"54":1}}],["works",{"2":{"47":1}}],["wget",{"2":{"23":2,"24":2,"29":2}}],["we",{"2":{"19":1}}],["well",{"2":{"4":1,"47":1}}],["walk",{"2":{"52":1}}],["wait",{"2":{"19":1}}],["wasm",{"2":{"18":1}}],["want",{"2":{"3":1,"23":1,"24":1}}],["writes",{"2":{"46":1}}],["written",{"2":{"3":1,"45":1}}],["wrote",{"2":{"12":1}}],["while",{"2":{"39":1,"40":1}}],["which",{"2":{"3":2}}],["when",{"2":{"12":1}}],["where",{"2":{"3":1,"33":1,"42":2}}],["wide",{"2":{"23":1,"24":1}}],["will",{"2":{"3":1,"8":1,"19":1,"25":1,"38":1,"45":1,"46":1,"49":1,"51":1,"52":1,"53":1,"55":1}}],["within",{"2":{"39":1}}],["without",{"2":{"23":1,"24":1,"25":1,"47":1}}],["with",{"0":{"1":1},"2":{"3":1,"15":1,"16":1,"19":3,"45":1,"51":1,"55":1}}],["ubuntu",{"0":{"27":1},"1":{"28":1,"29":1,"30":1},"2":{"27":1,"28":1}}],["url",{"2":{"16":1}}],["updating",{"2":{"26":1}}],["up",{"0":{"15":1,"44":1},"1":{"16":1,"17":1},"2":{"15":1,"16":2,"44":5,"46":3,"47":1,"52":1}}],["utilize",{"2":{"18":1}}],["utilizing",{"0":{"13":1},"1":{"14":1}}],["utility",{"2":{"3":1}}],["utilities",{"2":{"3":1}}],["usr",{"2":{"23":10,"24":10,"25":5}}],["using",{"0":{"7":1,"12":1,"51":1,"52":1,"53":1,"55":1},"1":{"53":1,"54":1,"55":1},"2":{"29":1,"49":1,"51":1,"52":2,"55":1}}],["usage",{"0":{"11":1},"2":{"5":1,"26":1,"31":1,"46":1}}],["useful",{"2":{"42":1}}],["users",{"2":{"25":2}}],["user",{"2":{"19":1,"28":1}}],["used",{"2":{"3":2,"40":1,"44":1,"46":1}}],["use",{"2":{"0":1,"2":1,"3":1,"9":1,"14":1,"19":2,"37":1,"39":1,"46":1,"47":1,"48":1}}],["lpc",{"2":{"45":1,"46":2,"47":2}}],["load",{"2":{"44":1}}],["lower",{"2":{"43":1,"44":1,"45":1}}],["low",{"2":{"39":1,"40":2,"42":1,"44":1,"45":1,"46":1}}],["local",{"2":{"23":7,"24":7,"25":4,"51":1,"55":1}}],["levels",{"2":{"42":1}}],["level",{"0":{"42":1},"2":{"42":1,"44":1,"46":1,"47":2}}],["lead",{"2":{"45":1}}],["leave",{"2":{"25":1}}],["learn",{"2":{"3":1}}],["let",{"2":{"19":1}}],["length",{"2":{"19":1}}],["lsb",{"2":{"19":4}}],["limits",{"2":{"46":1}}],["lightweight",{"0":{"33":1,"34":1},"2":{"37":2}}],["line",{"2":{"25":1}}],["linux",{"0":{"24":1},"2":{"21":1,"29":2,"30":1}}],["links",{"2":{"16":1}}],["lib",{"2":{"3":1}}],["library",{"2":{"3":2}}],["lt",{"2":{"14":2}}],["large",{"2":{"43":1}}],["larger",{"2":{"43":1,"44":1,"46":1}}],["layout",{"2":{"19":1}}],["layouts",{"2":{"3":1}}],["later",{"2":{"13":1}}],["latest",{"2":{"3":1,"7":1,"23":2,"24":2,"29":2,"50":1,"54":1}}],["c",{"2":{"51":2,"55":2}}],["customized",{"2":{"47":1}}],["currently",{"2":{"3":1,"31":1}}],["choose",{"2":{"47":1}}],["changes",{"2":{"25":1}}],["chmod",{"2":{"23":2,"24":2}}],["check",{"2":{"3":1,"17":1,"51":1}}],["cpu",{"2":{"8":2,"12":4,"23":10,"24":10,"26":2,"37":4,"47":1,"49":2,"50":2,"51":2,"53":2,"54":2,"55":2}}],["cd",{"2":{"7":1,"19":1,"49":1,"51":2,"53":1,"55":2}}],["cores",{"2":{"47":1}}],["core",{"2":{"46":2,"47":1}}],["correction",{"2":{"44":1,"46":1,"47":1}}],["correct",{"2":{"17":1}}],["count",{"2":{"45":2}}],["covers",{"2":{"38":1}}],["constraints",{"2":{"39":1}}],["container",{"2":{"51":2,"55":2}}],["contains",{"2":{"33":1,"34":1,"35":1,"45":1,"46":3}}],["control",{"2":{"39":1}}],["contract",{"2":{"19":1}}],["contracts",{"0":{"19":1},"2":{"4":1,"19":2}}],["configure",{"2":{"47":1}}],["configuring",{"2":{"38":1,"45":1}}],["configurations",{"2":{"19":1}}],["configuration",{"0":{"38":1,"39":1,"46":1,"47":1},"1":{"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1},"2":{"15":1,"16":1,"25":1,"38":2,"39":3,"45":4,"47":2}}],["config",{"2":{"8":2,"47":1,"49":2,"51":2,"53":2,"55":2}}],["copy",{"2":{"7":1,"49":1}}],["computation",{"2":{"46":1}}],["computational",{"2":{"39":1,"40":1,"42":1,"44":1}}],["complex",{"2":{"46":1}}],["components",{"2":{"31":1,"39":1}}],["committed",{"2":{"46":1}}],["commitment",{"2":{"39":1,"46":1}}],["commonly",{"2":{"44":1}}],["common",{"2":{"42":1}}],["command",{"2":{"8":1,"30":1,"37":1}}],["combined",{"0":{"35":1},"2":{"19":1}}],["comes",{"2":{"12":3}}],["com",{"2":{"7":1,"13":2,"23":2,"24":2,"29":1,"49":1,"51":1,"53":1,"55":1}}],["close",{"2":{"25":1}}],["cloned",{"2":{"16":1,"19":1}}],["clone",{"2":{"7":2,"13":2,"49":2,"51":2,"53":2,"55":2}}],["cli",{"2":{"3":1}}],["clia",{"2":{"3":1}}],["cryptographic",{"2":{"42":3,"47":1}}],["critical",{"2":{"39":1,"40":1}}],["created",{"2":{"51":1,"55":1}}],["create",{"0":{"47":1},"2":{"7":1,"16":1,"38":1,"47":1,"48":1,"49":1,"55":1}}],["creating",{"0":{"7":1,"48":1,"49":1,"51":1,"53":1,"55":1},"1":{"49":1,"50":1,"51":1},"2":{"4":1,"7":1}}],["crate",{"2":{"3":1}}],["caching",{"2":{"46":1,"47":1}}],["caches",{"2":{"46":1}}],["cache",{"2":{"45":1,"46":2,"47":2}}],["capabilities",{"2":{"34":1,"43":1,"47":1}}],["capable",{"2":{"3":1}}],["cargo",{"2":{"10":1,"13":1}}],["calldata",{"2":{"3":2,"14":2,"19":3}}],["can",{"2":{"3":4,"9":1,"13":1,"18":1,"19":1,"25":3,"26":1,"36":1,"46":2,"47":1,"55":1}}],["cairo1",{"2":{"19":2}}],["cairo0",{"2":{"19":2}}],["cairo",{"0":{"18":1},"2":{"3":5,"18":1,"19":1,"48":1}}],["full",{"2":{"45":1}}],["functionalities",{"2":{"35":1}}],["functionality",{"2":{"33":1}}],["function",{"2":{"3":1,"19":1,"40":1}}],["factor",{"0":{"43":2,"44":2},"2":{"43":6,"44":6,"45":2,"46":4,"47":2}}],["faster",{"2":{"43":1,"45":1}}],["fast",{"2":{"40":1}}],["fraudulent",{"2":{"45":1}}],["fri",{"0":{"40":1,"41":1},"2":{"38":1,"39":1,"40":1,"45":2,"46":3,"47":2}}],["from",{"2":{"3":1,"7":1,"12":3,"25":2,"27":1,"29":1,"39":1}}],["first",{"2":{"51":1}}],["find",{"2":{"36":1}}],["fibonacci",{"2":{"8":1,"12":8,"14":4,"19":2,"49":1,"51":1,"53":1,"55":1}}],["file",{"0":{"13":1,"47":1},"1":{"14":1},"2":{"12":12,"18":1,"25":2,"38":2,"39":2,"45":5,"47":3}}],["file=cpu",{"2":{"8":2,"49":2,"51":2,"53":2,"55":2}}],["file=fibonacci",{"2":{"8":4,"49":4,"51":4,"53":4,"55":4}}],["files",{"2":{"7":2,"12":3,"19":1,"49":2,"51":3,"53":2,"55":3}}],["flag",{"2":{"3":1}}],["focusing",{"2":{"38":1}}],["folder",{"2":{"25":2}}],["followed",{"2":{"37":1}}],["follows",{"2":{"14":1,"15":1}}],["following",{"2":{"5":1,"6":1,"8":1,"9":1,"16":1,"19":2,"21":1,"25":1,"30":1,"40":1,"47":1}}],["follow",{"2":{"3":1,"4":1,"5":1,"7":1,"20":1,"49":1}}],["foundry",{"0":{"15":1},"1":{"16":1,"17":1},"2":{"5":1,"15":1,"16":1}}],["format",{"2":{"3":1,"12":3,"38":1,"45":2,"47":1}}],["formats",{"2":{"3":1}}],["for",{"0":{"19":1,"23":1,"24":1,"40":1,"41":1,"50":1,"54":1},"2":{"3":3,"13":1,"14":2,"16":1,"18":1,"19":3,"21":1,"23":1,"24":1,"25":4,"33":1,"34":1,"35":1,"37":4,"38":2,"39":2,"42":3,"44":2,"45":3,"46":9,"47":11,"48":1,"51":1,"52":1,"55":1}}],["your",{"0":{"17":1},"2":{"15":1,"16":3,"17":1,"20":1,"23":1,"24":1,"25":5,"40":1,"47":4,"51":1,"55":1}}],["you",{"2":{"3":5,"5":2,"9":1,"13":1,"16":1,"17":1,"18":1,"19":3,"23":1,"24":1,"25":2,"26":3,"36":1,"47":1,"52":1,"55":1}}],["ranges",{"2":{"42":1}}],["rpc",{"2":{"16":1}}],["running",{"0":{"48":1},"1":{"49":1,"50":1,"51":1},"2":{"26":1}}],["run",{"2":{"8":2,"30":1,"49":2,"51":5,"53":2,"55":4}}],["rust",{"2":{"3":1,"5":1,"18":1}}],["reduces",{"2":{"46":1}}],["redundancy",{"2":{"43":1,"46":1}}],["reasonable",{"2":{"45":1}}],["reads",{"2":{"46":1}}],["read",{"2":{"3":1}}],["resilient",{"2":{"43":1}}],["resource",{"2":{"3":1,"45":1}}],["resourcedescriptionmadara",{"2":{"3":1}}],["resources",{"0":{"3":1},"2":{"39":1,"42":1}}],["reed",{"2":{"40":1,"43":1,"44":1,"46":1}}],["required",{"2":{"45":1,"52":1}}],["requirements",{"2":{"40":1}}],["requires",{"2":{"39":1,"42":1}}],["requiring",{"2":{"34":1}}],["re",{"2":{"19":1,"26":1}}],["refers",{"2":{"45":1}}],["refer",{"2":{"16":1,"49":1,"53":1,"55":1}}],["referenced",{"2":{"5":1}}],["recommendations",{"2":{"47":1}}],["recommended",{"2":{"23":1,"24":1,"28":1}}],["receiving",{"2":{"12":1}}],["recursive",{"2":{"3":1,"19":3}}],["related",{"2":{"46":2}}],["reload",{"2":{"25":1}}],["reliable",{"2":{"3":1}}],["releases",{"2":{"23":2,"24":2,"29":2}}],["release",{"2":{"3":1,"7":1}}],["repository",{"2":{"3":1,"7":1,"13":1,"16":1,"19":1,"36":1,"49":1,"51":2,"53":1,"55":2}}],["breakdown",{"0":{"46":1}}],["balanced",{"2":{"44":1}}],["balance",{"2":{"38":1,"43":1,"45":1,"47":2}}],["bash",{"2":{"25":2,"51":2,"55":2}}],["bashrc",{"2":{"25":3}}],["based",{"2":{"20":1,"28":1,"40":1,"47":2,"48":1}}],["but",{"2":{"23":1,"24":1,"42":1,"43":3,"44":2,"45":3,"46":2}}],["bin",{"2":{"23":10,"24":10,"25":5,"51":2,"55":2}}],["binary",{"0":{"52":1},"1":{"53":1,"54":1,"55":1},"2":{"7":1,"33":1,"34":1,"49":1,"53":1}}],["binaries",{"0":{"6":1,"7":1,"22":1,"25":1,"53":1},"1":{"23":1,"24":1,"26":1},"2":{"3":1,"20":1,"21":1,"23":4,"24":4,"25":3,"26":1,"35":1,"49":1,"52":1,"53":1}}],["bits",{"0":{"42":1},"2":{"42":5,"45":1,"46":2,"47":1}}],["bit",{"2":{"19":1,"42":1}}],["blowup",{"0":{"44":1},"2":{"44":1,"45":1,"46":1}}],["blow",{"0":{"44":1},"2":{"44":5,"46":1,"47":1}}],["blockstone",{"2":{"3":1}}],["blake2s",{"2":{"19":3}}],["bound",{"2":{"45":1,"46":2,"47":2}}],["both",{"2":{"35":2,"44":1,"46":1,"50":1,"52":1,"54":1}}],["box",{"2":{"18":1}}],["bookthis",{"2":{"3":1}}],["bootloader",{"2":{"3":1}}],["by",{"2":{"3":1,"6":1,"9":1,"18":1,"26":1,"37":1,"44":1,"45":1,"48":1}}],["being",{"2":{"46":1}}],["better",{"2":{"44":1,"45":1,"46":1}}],["between",{"2":{"38":1,"42":1,"43":1,"44":1,"45":1,"47":1}}],["begin",{"2":{"5":1}}],["before",{"2":{"5":1,"17":1}}],["below",{"2":{"4":1,"45":1}}],["beetwen",{"2":{"3":1}}],["be",{"2":{"3":3,"8":1,"25":2,"40":1,"46":1,"49":1,"51":1,"53":1,"55":1}}],["especially",{"2":{"46":1}}],["efficiency",{"2":{"44":1,"47":1}}],["efficient",{"2":{"39":1}}],["error",{"2":{"43":4,"44":1,"46":1,"47":1}}],["environment",{"2":{"52":1}}],["environments",{"2":{"33":1,"35":1,"42":3}}],["entrypoint",{"2":{"51":2,"55":2}}],["ensuring",{"2":{"44":1}}],["ensures",{"2":{"25":1,"39":1,"40":1}}],["ensure",{"2":{"4":1,"5":1,"25":1,"51":1,"55":1}}],["encoding",{"2":{"43":1,"44":1,"46":1}}],["e",{"2":{"25":1,"46":4,"47":1}}],["echo",{"2":{"8":1,"49":1,"51":1,"53":1,"55":1}}],["ethereum",{"2":{"3":1}}],["evm",{"0":{"9":1,"12":1},"1":{"10":1,"11":1,"12":1},"2":{"3":2,"9":1,"10":1,"11":1,"12":4}}],["either",{"2":{"3":1}}],["each",{"2":{"3":1,"37":1,"45":1}}],["exec",{"2":{"51":2,"55":2}}],["executable",{"2":{"23":1,"24":1}}],["executed",{"2":{"25":1}}],["execute",{"2":{"17":1}}],["execution",{"2":{"3":1}}],["executing",{"2":{"3":1}}],["excessive",{"2":{"47":1}}],["explanations",{"2":{"45":1}}],["explain",{"2":{"38":1}}],["expansion",{"0":{"43":2},"2":{"43":6,"45":1,"46":1,"47":1}}],["export",{"2":{"25":1}}],["expected",{"2":{"3":1}}],["extra",{"2":{"12":6}}],["examples",{"2":{"19":1,"37":1}}],["example",{"0":{"0":1,"12":1},"2":{"0":1,"2":1,"7":1,"8":1,"17":1,"19":1,"42":1,"43":1,"44":1,"45":3,"46":4,"47":2,"49":2,"51":1,"53":2,"55":1}}],["improve",{"2":{"46":1}}],["important",{"2":{"42":1}}],["image",{"0":{"33":1,"34":1,"35":1},"2":{"37":3,"50":1,"54":1}}],["images",{"0":{"31":1,"32":1,"36":1,"37":1,"50":1,"54":1},"1":{"32":1,"33":2,"34":2,"35":2,"36":1,"37":1},"2":{"31":2,"36":1}}],["ideal",{"2":{"33":1}}],["i",{"2":{"30":1}}],["io",{"2":{"7":1,"23":2,"24":2,"29":1,"37":6,"49":1,"50":2,"51":5,"53":1,"54":2,"55":5}}],["if",{"2":{"3":1,"17":1,"23":1,"24":1,"25":1,"26":1}}],["its",{"2":{"31":1}}],["it",{"2":{"3":1,"18":1,"29":1,"38":1,"40":1,"42":1,"43":1,"45":1,"46":1,"52":1}}],["influences",{"2":{"44":1}}],["information",{"2":{"26":1}}],["including",{"2":{"45":1,"46":1}}],["includes",{"2":{"46":1,"50":1,"52":1,"54":1}}],["include",{"2":{"25":1,"39":1,"47":1}}],["increases",{"2":{"43":1,"44":2,"45":2,"46":2}}],["increase",{"2":{"43":1}}],["intermediate",{"2":{"46":1}}],["interactive",{"2":{"40":1}}],["interact",{"2":{"15":1}}],["integrity",{"0":{"13":1,"19":1},"1":{"14":1},"2":{"3":2,"4":1,"5":1,"8":1,"13":3,"16":1,"19":3,"40":1}}],["into",{"2":{"3":1,"19":1}}],["in",{"0":{"19":1},"2":{"3":1,"7":1,"8":1,"12":1,"18":3,"19":3,"25":4,"36":1,"39":1,"42":2,"43":1,"45":1,"46":2,"47":1,"49":1,"51":1,"53":1,"55":1}}],["input",{"2":{"3":1,"8":4,"49":4,"51":4,"53":4,"55":4}}],["installating",{"0":{"30":1}}],["installation",{"0":{"10":1,"20":1,"26":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"2":{"6":1,"26":2,"49":1,"51":1,"53":1,"55":1}}],["installing",{"0":{"27":1},"1":{"28":1,"29":1,"30":1},"2":{"52":1}}],["install",{"0":{"22":1},"1":{"23":1,"24":1},"2":{"10":1,"13":2,"20":1,"27":1,"28":1,"30":2}}],["installed",{"2":{"5":1,"51":1,"55":1}}],["instructions",{"2":{"3":1,"4":1,"5":1,"9":1,"20":1,"27":1,"38":1,"48":1,"51":1,"55":1}}],["inside",{"2":{"3":1,"16":1}}],["is",{"2":{"2":1,"3":8,"17":1,"19":1,"23":1,"24":1,"26":1,"33":1,"40":2,"42":3,"43":3,"44":2,"45":2,"47":2,"48":1,"51":1,"55":1}}],["overhead",{"2":{"40":1,"47":1}}],["overview",{"0":{"39":1}}],["other",{"2":{"25":1,"46":1}}],["options",{"2":{"39":1,"45":1,"46":1,"47":2}}],["optional",{"2":{"23":2,"24":2}}],["optimize",{"2":{"47":2}}],["optimizing",{"2":{"46":1}}],["optimization",{"2":{"39":1,"45":1,"46":1}}],["optimizations",{"2":{"39":1,"45":1}}],["optimal",{"2":{"38":1}}],["operates",{"2":{"39":1}}],["operating",{"2":{"20":1}}],["open",{"2":{"25":1}}],["o",{"2":{"23":2,"24":2,"29":1}}],["os",{"2":{"20":1}}],["oracle",{"2":{"40":1}}],["original",{"2":{"14":1,"44":2}}],["or",{"2":{"7":1,"25":2,"26":1,"27":1,"28":1,"29":1,"42":1,"49":1}}],["out",{"2":{"8":1,"12":1,"49":1,"51":1,"53":1,"55":1}}],["outlined",{"2":{"5":1,"7":1}}],["output",{"2":{"3":1,"12":4}}],["our",{"2":{"3":1,"19":1}}],["one",{"2":{"19":1}}],["onchain",{"2":{"19":1}}],["only",{"2":{"3":1,"33":2,"34":2}}],["on",{"0":{"4":1,"27":1},"1":{"28":1,"29":1,"30":1},"2":{"3":3,"4":2,"19":3,"20":2,"27":1,"31":1,"38":2,"40":1,"46":1,"47":2,"48":2,"51":1,"55":1}}],["official",{"2":{"48":1,"51":1,"55":1}}],["of",{"0":{"39":1,"45":1,"46":1},"2":{"0":1,"2":2,"3":8,"31":1,"38":2,"39":1,"40":1,"42":1,"43":1,"44":4,"45":3,"46":6,"47":8}}],["amount",{"2":{"46":1,"47":1}}],["amp",{"2":{"8":2,"49":2,"51":6,"53":2,"55":6}}],["after",{"2":{"26":1}}],["allocate",{"2":{"47":1}}],["allocated",{"2":{"46":1}}],["allocation",{"2":{"39":1}}],["allows",{"2":{"46":1}}],["all",{"2":{"45":1}}],["also",{"2":{"38":1,"42":1,"46":1}}],["along",{"2":{"20":1}}],["alternatively",{"2":{"9":1,"13":1}}],["arm64",{"0":{"23":1},"2":{"21":1,"23":2}}],["architectures",{"0":{"21":1},"2":{"21":1}}],["architecture",{"2":{"20":1}}],["are",{"2":{"3":1,"5":1,"19":1,"21":1,"31":1,"37":1,"40":1,"42":1}}],["app",{"2":{"51":4,"55":4}}],["applications",{"2":{"47":1}}],["apply",{"2":{"25":1}}],["appropriate",{"2":{"16":1,"47":2}}],["apithis",{"2":{"3":1}}],["adjust",{"2":{"47":2}}],["adjusted",{"2":{"40":1}}],["added",{"2":{"43":1,"44":1}}],["adding",{"0":{"25":1},"1":{"26":1},"2":{"23":1,"24":1}}],["add",{"2":{"16":1,"25":2}}],["adapter",{"0":{"9":1,"12":1},"1":{"10":1,"11":1,"12":1},"2":{"3":1,"9":1,"10":1,"11":1,"12":4}}],["adapterstark",{"2":{"3":1}}],["actually",{"2":{"24":1}}],["accessing",{"0":{"36":1}}],["accessed",{"2":{"25":1}}],["access",{"2":{"23":1,"24":1,"28":1}}],["account",{"0":{"17":1},"2":{"15":1,"16":5,"17":2}}],["acount",{"0":{"16":1}}],["at",{"2":{"8":1,"49":1,"51":1,"53":1,"55":1}}],["available",{"0":{"32":1},"1":{"33":1,"34":1,"35":1},"2":{"8":1,"21":1,"23":1,"24":1,"31":1,"47":1,"49":1,"53":1}}],["air",{"2":{"8":4,"12":4,"23":10,"24":10,"26":2,"37":4,"49":4,"50":2,"51":4,"53":4,"54":2,"55":4}}],["about",{"2":{"3":1}}],["aspects",{"2":{"39":1}}],["as",{"2":{"3":1,"4":2,"5":1,"14":1,"15":1,"47":2}}],["a",{"0":{"7":1,"47":1,"48":1,"49":1,"51":1,"53":1,"55":1},"1":{"49":1,"50":1,"51":1},"2":{"3":9,"4":1,"7":2,"27":1,"28":1,"38":1,"39":1,"40":2,"42":2,"43":1,"44":5,"45":4,"46":2,"47":8,"49":2,"51":1,"52":1,"55":1}}],["annotation",{"2":{"12":10}}],["annotations",{"2":{"3":1,"8":1}}],["annotated",{"2":{"8":1,"12":5,"14":2}}],["and",{"0":{"7":1,"22":1,"48":1,"49":1,"51":1,"53":1,"55":1},"1":{"23":1,"24":1,"49":1,"50":1,"51":1},"2":{"3":9,"4":1,"5":1,"7":2,"15":1,"16":1,"18":1,"19":2,"20":2,"23":1,"24":1,"25":1,"31":2,"35":2,"38":2,"39":2,"42":1,"43":3,"44":2,"45":2,"46":2,"47":5,"48":1,"49":1,"50":1,"52":1,"54":1}}],["anywhere",{"2":{"25":1}}],["any",{"2":{"3":1,"25":2,"45":1}}],["an",{"2":{"0":1,"2":1,"12":1,"37":1,"38":1,"43":1,"46":1,"47":2}}],["please",{"2":{"49":1,"53":1}}],["placing",{"2":{"26":1}}],["placed",{"2":{"25":1}}],["point",{"2":{"47":2}}],["polynomial",{"2":{"39":1,"40":1,"46":2}}],["poseidon",{"2":{"19":1}}],["performance",{"2":{"38":1,"39":1,"42":1,"43":1,"44":2,"46":1,"47":3}}],["perfect",{"2":{"34":1}}],["purpose",{"2":{"47":1}}],["pull",{"2":{"37":5,"50":1,"54":1}}],["pulling",{"0":{"37":1}}],["public",{"2":{"8":2,"49":2,"51":2,"53":2,"55":2}}],["privilege",{"2":{"28":1}}],["private",{"2":{"8":2,"49":2,"51":2,"53":2,"55":2}}],["prefer",{"2":{"25":1}}],["prefunded",{"2":{"17":1}}],["prerequisites",{"0":{"5":1,"28":1},"1":{"6":1,"7":1,"8":1},"2":{"5":1}}],["probability",{"2":{"45":1}}],["production",{"2":{"42":1}}],["proper",{"2":{"39":1}}],["protocol",{"0":{"40":1,"41":1},"2":{"38":1,"39":1,"40":1,"45":1,"46":3,"47":2}}],["proxy",{"2":{"19":1}}],["procedures",{"2":{"13":1}}],["proceed",{"2":{"12":1}}],["processor",{"2":{"46":1,"47":1}}],["processors",{"2":{"46":1}}],["process",{"2":{"4":1,"44":1,"46":2}}],["proofs",{"0":{"4":1},"2":{"3":2,"4":1,"45":1,"46":1,"48":1}}],["proof",{"0":{"7":1,"8":1,"13":1,"14":1,"48":1,"49":1,"51":1,"52":1,"53":1,"55":1},"1":{"14":1,"49":1,"50":1,"51":1,"53":1,"54":1,"55":1},"2":{"3":7,"7":2,"8":7,"12":13,"13":2,"14":8,"18":2,"39":2,"40":2,"42":1,"43":4,"44":2,"45":4,"46":8,"47":2,"49":8,"51":7,"52":1,"53":6,"55":7}}],["programs",{"2":{"3":3,"48":1}}],["provided",{"2":{"52":1}}],["provides",{"2":{"3":2,"4":1,"20":1,"27":1,"31":1,"43":1,"44":1,"45":2,"48":1}}],["proving",{"2":{"3":1,"33":1,"35":1}}],["prove",{"2":{"3":1,"40":1}}],["prover",{"0":{"33":1,"38":1,"39":1,"48":1},"1":{"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"49":1,"50":1,"51":1},"2":{"3":5,"8":3,"12":1,"23":5,"24":5,"26":1,"29":2,"30":1,"31":1,"33":1,"35":1,"37":4,"38":1,"39":2,"45":2,"46":2,"47":2,"48":2,"49":5,"50":3,"51":9,"53":4,"54":3,"55":9}}],["project",{"2":{"3":1}}],["packages",{"2":{"28":1,"31":1,"36":2}}],["package",{"0":{"29":1,"30":1},"2":{"27":1,"29":1,"30":1,"50":1,"54":1}}],["packaging",{"0":{"0":1,"1":1,"2":1,"3":1,"20":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"2":{"0":1,"2":2,"7":3,"19":1,"23":2,"24":2,"29":2,"37":3,"49":3,"50":1,"51":6,"53":3,"54":1,"55":6}}],["path=",{"2":{"25":1}}],["path",{"0":{"25":1},"1":{"26":1},"2":{"23":1,"24":1,"25":2,"26":1}}],["pasting",{"2":{"18":1}}],["parallelize",{"2":{"46":1}}],["parallelization",{"2":{"39":1}}],["params",{"2":{"8":1,"49":1,"51":1,"53":1,"55":1}}],["parameters",{"0":{"41":1,"46":1},"2":{"38":1,"39":1,"45":1,"46":2,"47":3}}],["parameter",{"2":{"8":1,"49":1,"51":1,"53":1,"55":1}}],["parser",{"2":{"3":1}}],["parserthis",{"2":{"3":1}}],["parse",{"2":{"3":2}}],["parts",{"2":{"45":1}}],["part",{"2":{"3":1}}],["page",{"2":{"2":1,"29":1}}],["times",{"2":{"45":1}}],["time",{"2":{"43":1,"45":3,"46":1}}],["typically",{"2":{"42":1}}],["tx",{"2":{"19":1}}],["txt",{"2":{"12":6}}],["tree",{"2":{"39":1,"45":1,"46":3,"47":2}}],["true",{"2":{"8":1}}],["translate",{"2":{"3":1}}],["transactions",{"2":{"3":1}}],["tmp",{"2":{"7":2,"29":1,"30":1,"49":2,"51":3,"53":2,"55":3}}],["testing",{"2":{"19":1}}],["test",{"0":{"7":1,"51":1,"53":1,"55":1},"2":{"7":4,"12":3,"19":1,"49":2,"51":3,"53":2,"55":3}}],["through",{"2":{"52":1}}],["threads",{"2":{"45":1,"46":3,"47":2}}],["three",{"2":{"31":1}}],["than",{"2":{"42":1}}],["that",{"2":{"3":2,"25":3,"39":1,"40":2,"42":1,"45":1}}],["there",{"2":{"31":1}}],["then",{"2":{"25":1,"26":1}}],["them",{"2":{"3":1,"25":1}}],["these",{"2":{"3":1,"5":1,"39":1,"49":1}}],["the",{"0":{"8":1,"13":2,"14":1,"19":1,"25":1,"29":1,"30":1,"36":1,"37":1,"39":1,"40":1,"41":1,"52":1},"1":{"14":2,"26":1,"53":1,"54":1,"55":1},"2":{"2":1,"3":19,"4":1,"5":2,"6":1,"7":6,"8":5,"9":2,"12":1,"13":2,"14":4,"16":1,"17":2,"18":4,"19":9,"20":1,"21":1,"23":4,"24":4,"25":5,"26":4,"29":2,"30":2,"31":1,"33":1,"34":1,"35":1,"36":2,"37":5,"38":5,"39":5,"40":4,"42":2,"43":8,"44":9,"45":10,"46":23,"47":10,"48":2,"49":8,"50":2,"51":8,"52":3,"53":8,"54":2,"55":7}}],["this",{"2":{"2":1,"3":3,"4":1,"7":1,"19":2,"20":1,"23":1,"24":1,"25":2,"27":1,"38":1,"42":2,"44":1,"45":1,"46":5,"47":1,"48":2,"52":1}}],["toml",{"2":{"16":1}}],["tool",{"2":{"13":1,"14":1,"18":1}}],["tools",{"2":{"5":1}}],["top",{"2":{"3":1}}],["to",{"0":{"13":1,"25":1,"47":1},"1":{"14":1,"26":1},"2":{"0":1,"2":1,"3":9,"4":2,"5":1,"7":3,"8":2,"12":2,"14":1,"15":1,"16":1,"17":1,"20":1,"23":3,"24":3,"25":6,"27":1,"28":1,"29":1,"30":1,"31":1,"37":1,"38":1,"39":2,"40":1,"43":1,"44":1,"45":3,"46":5,"47":2,"48":2,"49":6,"51":3,"52":1,"53":4,"55":3}}],["high",{"2":{"42":2,"44":1,"45":1,"47":1}}],["higher",{"2":{"42":1,"43":1,"44":2,"45":1,"46":1}}],["hosted",{"2":{"31":1}}],["hope",{"2":{"26":1}}],["home",{"2":{"19":1}}],["how",{"0":{"47":1},"2":{"0":1,"2":1,"4":1,"20":1,"38":1,"43":1,"44":1,"45":1,"48":1,"52":1}}],["hardware",{"2":{"47":1}}],["hasher",{"2":{"19":2}}],["hashers",{"2":{"19":1}}],["hash",{"2":{"19":1}}],["have",{"2":{"5":1}}],["https",{"2":{"7":1,"13":2,"23":2,"24":2,"29":1,"49":1,"51":1,"53":1,"55":1}}],["herodotusdev",{"2":{"13":2}}],["herodotus",{"0":{"13":1},"1":{"14":1},"2":{"13":1,"19":2}}],["here",{"2":{"0":1,"2":1,"5":2,"9":1,"37":1}}],["help",{"2":{"11":1,"26":2}}],["helps",{"2":{"3":1}}],["sized",{"2":{"46":1}}],["size",{"2":{"43":1,"45":1,"46":2,"47":2}}],["simplify",{"2":{"31":1}}],["save",{"2":{"25":1,"47":2}}],["safe",{"2":{"3":1}}],["solid",{"2":{"47":1}}],["solomon",{"2":{"40":1,"43":1,"44":1,"46":1}}],["source",{"2":{"25":2}}],["so",{"2":{"20":1}}],["systems",{"2":{"47":1}}],["system",{"0":{"25":1},"1":{"26":1},"2":{"20":1,"23":1,"24":1,"25":2,"28":1}}],["smilling",{"2":{"26":1}}],["small",{"2":{"19":2,"43":1}}],["smooth",{"2":{"4":1}}],["script",{"2":{"19":1}}],["scarb",{"2":{"5":1}}],["should",{"2":{"40":1}}],["shown",{"2":{"9":1}}],["shell",{"2":{"25":2}}],["sh",{"2":{"19":3}}],["snfoundry",{"2":{"16":1}}],["such",{"2":{"47":1}}],["successful",{"2":{"26":1}}],["successfully",{"2":{"8":1,"49":1,"51":1,"53":1,"55":1}}],["suitable",{"2":{"35":1,"42":2}}],["super",{"2":{"28":1}}],["supported",{"0":{"21":1},"2":{"3":1}}],["sudo",{"2":{"23":2,"24":6,"28":1,"30":1}}],["sure",{"2":{"5":1,"16":1,"17":1,"19":1}}],["speeding",{"2":{"46":1}}],["speed",{"2":{"46":1}}],["specifies",{"2":{"46":1}}],["specific",{"2":{"38":1}}],["specifically",{"2":{"3":1}}],["splitting",{"0":{"8":1}}],["split",{"2":{"3":1,"8":1}}],["sdk",{"2":{"3":3}}],["sdkis",{"2":{"3":1}}],["section",{"2":{"45":1,"46":2}}],["secure",{"2":{"42":1,"43":1}}],["security",{"0":{"40":1,"42":2},"2":{"38":2,"39":2,"40":1,"42":8,"43":1,"44":4,"45":5,"46":5,"47":6}}],["sensitive",{"2":{"42":1}}],["see",{"2":{"26":1}}],["serializer",{"2":{"13":2,"14":3}}],["serialize",{"0":{"13":1},"1":{"14":1},"2":{"14":1}}],["serializing",{"0":{"14":1},"2":{"3":1}}],["server",{"2":{"3":2}}],["sequencer",{"2":{"3":1}}],["setups",{"2":{"34":1}}],["setup",{"2":{"17":1}}],["settings",{"0":{"40":1},"2":{"38":1,"39":4,"40":1,"45":1,"46":3}}],["setting",{"0":{"15":1},"1":{"16":1,"17":1},"2":{"19":1,"42":1,"44":1,"45":1,"46":1,"52":1}}],["set",{"2":{"3":2,"15":1,"16":1,"47":2}}],["strikes",{"2":{"45":1}}],["string",{"2":{"3":1}}],["stronger",{"2":{"43":1}}],["strong",{"2":{"42":2,"47":1}}],["strength",{"2":{"42":1}}],["step",{"0":{"29":1,"30":1},"2":{"23":1,"24":1,"25":1,"48":2}}],["steps",{"2":{"4":1,"7":1,"49":1,"52":1}}],["starting",{"2":{"47":2}}],["started",{"0":{"1":1}}],["stark",{"0":{"9":1,"12":1},"1":{"10":1,"11":1,"12":1},"2":{"3":3,"9":1,"10":1,"11":1,"12":4}}],["starkware",{"2":{"3":1}}],["starknet",{"0":{"4":1,"15":1},"1":{"16":1,"17":1},"2":{"3":4,"4":1,"5":1,"15":1,"16":1,"19":6}}],["stone6",{"2":{"19":2}}],["stone5",{"2":{"19":2}}],["stone",{"0":{"0":1,"1":1,"2":1,"3":1,"4":1,"20":1,"25":1,"27":1,"29":1,"31":1,"38":1,"39":1,"48":1,"52":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":2,"28":1,"29":1,"30":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"49":1,"50":1,"51":1,"53":1,"54":1,"55":1},"2":{"0":1,"2":2,"3":6,"4":1,"7":3,"12":6,"19":2,"20":1,"21":1,"23":2,"24":2,"27":1,"29":4,"30":2,"31":1,"33":1,"34":1,"35":1,"36":2,"37":5,"38":1,"39":1,"45":1,"47":1,"48":2,"49":4,"50":3,"51":8,"52":1,"53":3,"54":3,"55":8}}],["s",{"2":{"0":1,"2":1,"18":1,"19":1,"25":1,"47":1,"51":1,"55":1}}]],"serializationVersion":2}
